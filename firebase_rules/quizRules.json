{
  "rules": {
    "user-question-banks": {
      "$userid": {
        "$questionBankUniqueID": {
          ".validate": "newData.hasChildren(['member-type'])",
          "member-type": {
            ".validate": "newData.isNumber() && (newData.val() == 1 || newData.val() == 2)"
          },
          "$other": {
            ".validate": "false"
          },
          ".write": "data.val() == null && (newData.child('member').val() - type == 1 && (auth != null && auth.uid == UserID)) || data.val() != null && newData.val() != null && (newData.child('member').val() - type == 1 && (auth != null && auth.uid == UserID) || auth != null && (root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid]['member-type'] == 1) && newData.child('member-type').val() == 2)",
          ".read": "root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid] != null"
        }
      }
    },
    "question-bank-memberships": {
      "$questionBankUniqueID": {
        "$UserID": {
          ".validate": "newData.hasChildren(['member-type'])",
          "member-type": {
            ".validate": "newData.isNumber() && (newData.val() == 1 || newData.val() == 2)"
          },
          "$other": {
            ".validate": "false"
          },
          ".write": "data.val() == null && (newData.child('member').val() - type == 1 && (auth != null && auth.uid == $UserID)) || data.val() != null && newData.val() != null && (newData.child('member').val() - type == 1 && (auth != null && auth.uid == $UserID) || auth != null && (root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid]['member-type'] == 1) && newData.child('member-type').val() == 2)",
          ".read": "root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid] != null"
        }
      }
    },
    "question-bank": {
      "$questionBankUniqueID": {
        ".validate": "newData.hasChildren(['timestamp', 'title', 'desc'])",
        "timestamp": {
          ".validate": "newData.isNumber() && newData.val() <= Date.now"
        },
        "title": {
          ".validate": "newData.isString()"
        },
        "desc": {
          ".validate": "newData.isString()"
        },
        "$other": {
          ".validate": "false"
        },
        ".write": "data.val() == null && auth != null || data.val() != null && newData.val() != null && (newData.child('member').val() - type == 1 && (auth != null && auth.uid == UserID) || root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid]['member-type'] == 2)",
        ".read": "auth != null && root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid] != null"
      }
    },
    "question-bank-topics": {
      "$questionBankUniqueID": {
        "$autotopicid": {
          "subtopics": {
            "$autoSubTopicID": {
              "questions": {
                "$questionID": {
                  ".validate": "newData.isBoolean()"
                },
                ".validate": "newData.hasChildren()"
              },
              ".validate": "newData.hasChildren(['timestamp', 'title', 'desc', 'questions'])",
              "timestamp": {
                ".validate": "newData.isNumber() && newData.val() <= Date.now"
              },
              "title": {
                ".validate": "newData.isString()"
              },
              "desc": {
                ".validate": "newData.isString()"
              },
              "$other": {
                ".validate": "false"
              }
            },
            ".validate": "newData.hasChildren(['autoSubTopicID'])"
          },
          "question": {
            "$questionID": {
              ".validate": "newData.isBoolean()"
            },
            ".validate": "newData.hasChildren()"
          },
          ".validate": "newData.hasChildren(['timestamp', 'title', 'desc', 'subtopics', 'question'])",
          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() <= Date.now"
          },
          "title": {
            ".validate": "newData.isString()"
          },
          "desc": {
            ".validate": "newData.isString()"
          },
          "$other": {
            ".validate": "false"
          }
        }
      }
    },
    "question-bank-quizes": {
      "$questionBankID": {
        ".validate": "newData.hasChildren(['quizID'])",
        "$quizID": {
          ".validate": "newData.isBoolean()"
        },
        ".write": "data.val() == null && auth != null || data.val() != null && newData.val() != null && (newData.child('member').val() - type == 1 && (auth != null && auth.uid == UserID) || root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid]['member-type'] == 2)",
        ".read": "auth != null && root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid] != null"
      }
    },
    "group-quizes": {
      "$groupID": {
        ".validate": "newData.hasChildren(['quizID'])",
        "$quizID": {
          ".validate": "newData.isBoolean()"
        },
        ".write": "data.val() == null && (root.child('group-members').child($groupid).child(auth.uid).child('membership-type').val() > 0 && root.child('group-members').child($groupid).child(auth.uid).val() != null || root.child('group-members').child($groupid).child(auth.uid).child('membership-type').val() == 2) || data.val() != null && newData.val() != null && (root.child('group-members').child($groupid).child(auth.uid).child('membership-type').val() > 0 && root.child('group-members').child($groupid).child(auth.uid).val() != null || root.child('group-members').child($groupid).child(auth.uid).child('membership-type').val() == 2)",
        ".read": "auth != null && root.child('group-members').child($groupid).child(auth.uid).child('membership-type').val() > 0"
      }
    },
    "quizes": {
      "$quizID": {
        ".validate": "newData.hasChildren(['title', 'desc', 'duration', 'num-questions'])",
        "title": {
          ".validate": "newData.isString()"
        },
        "desc": {
          ".validate": "newData.isString()"
        },
        "duration": {
          ".validate": "newData.isNumber()"
        },
        "num-questions": {
          ".validate": "newData.isNumber()"
        },
        "$other": {
          ".validate": "false"
        },
        ".write": "data.val() == null && (newData.child('member').val() - type == 1 && (auth != null && auth.uid == UserID) || root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid]['member-type'] == 2) || data.val() != null && newData.val() != null && (newData.child('member').val() - type == 1 && (auth != null && auth.uid == UserID) || root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid]['member-type'] == 2)",
        ".read": "auth != null && root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid] != null"
      }
    },
    "quiz-topics": {
      "$quizID": {
        "$autotopicID": {
          "subtopics": {
            "$autoSubTopicID": {
              "questions": {
                "$questions": {
                  ".validate": "newData.isBoolean()"
                },
                ".validate": "newData.hasChildren()"
              },
              ".validate": "newData.hasChildren(['timestamp', 'title', 'desc', 'questions'])",
              "timestamp": {
                ".validate": "newData.isNumber() && newData.val() <= Date.now"
              },
              "title": {
                ".validate": "newData.isString()"
              },
              "desc": {
                ".validate": "newData.isString()"
              },
              "$other": {
                ".validate": "false"
              }
            },
            ".validate": "newData.hasChildren(['autoSubTopicID'])"
          },
          "questions": {
            "$questionsID": {
              ".validate": "newData.isBoolean()"
            }
          },
          ".validate": "newData.hasChildren(['timestamp', 'title', 'desc', 'subtopics', 'question'])",
          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() <= Date.now"
          },
          "title": {
            ".validate": "newData.isString()"
          },
          "desc": {
            ".validate": "newData.isString()"
          },
          "question": {
            ".validate": "newData.hasChildren()"
          },
          "$other": {
            ".validate": "false"
          },
          ".write": "data.val() == null && (newData.child('member').val() - type == 1 && (auth != null && auth.uid == UserID) || root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid]['member-type'] == 2) || data.val() != null && newData.val() != null && (newData.child('member').val() - type == 1 && (auth != null && auth.uid == UserID) || root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid]['member-type'] == 2)",
          ".read": "auth != null && root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid] != null"
        }
      }
    },
    "quiz-questions": {
      "$quizID": {
        "$questionID": {
          ".validate": "newData.hasChildren(['title', 'type', 'desc', 'options'])",
          "title": {
            ".validate": "newData.isString()"
          },
          "type": {
            ".validate": "newData.isNumber() && (newData.val() == 1 || newData.val() == 2 || newData.val() == 3)"
          },
          "desc": {
            ".validate": "newData.isString()"
          },
          "options": {
            ".validate": "newData.hasChildren(['optionID'])",
            "$optionID": {
              ".validate": "newData.hasChildren()"
            }
          },
          "$other": {
            ".validate": "false"
          },
          ".write": "data.val() == null && (newData.child('member').val() - type == 1 && (auth != null && auth.uid == UserID) || root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid]['member-type'] == 2) || data.val() != null && newData.val() != null && (newData.child('member').val() - type == 1 && (auth != null && auth.uid == UserID) || root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid]['member-type'] == 2)",
          ".read": "auth != null && root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid] != null"
        }
      }
    },
    "quiz-answers": {
      "$quizID": {
        "$questionID": {
          ".validate": "newData.hasChildren(['title', 'type', 'desc-html', 'discussion-html', 'options'])",
          "title": {
            ".validate": "newData.isString()"
          },
          "type": {
            ".validate": "newData.isNumber() && (newData.val() == 1 || newData.val() == 2 || newData.val() == 3)"
          },
          "desc-html": {
            ".validate": "newData.isString()"
          },
          "discussion-html": {
            ".validate": "newData.isString()"
          },
          "options": {
            ".validate": "newData.hasChildren(['optionID'])",
            "$optionID": {
              ".validate": "newData.hasChildren(['html', 'correct', 'discussion-html'])",
              "html": {
                ".validate": "newData.isString()"
              },
              "correct": {
                ".validate": "newData.isBoolean()"
              },
              "discussion-html": {
                ".validate": "newData.isString()"
              },
              "$other": {
                ".validate": "false"
              }
            }
          },
          "$other": {
            ".validate": "false"
          },
          ".write": "data.val() == null && (newData.child('member').val() - type == 1 && (auth != null && auth.uid == UserID) || root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid]['member-type'] == 2) || data.val() != null && newData.val() != null && (newData.child('member').val() - type == 1 && (auth != null && auth.uid == UserID) || root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid]['member-type'] == 2)",
          ".read": "auth != null && root.child('question').val() - bank - memberships[questionBankUniqueID][auth.uid] != null"
        }
      }
    },
    "quiz-answer-sheet": {
      "$groupid": {
        "$quizid": {
          "$userid": {
            "$questionID": {
              ".validate": "newData.hasChildren(['optionID', 'correct'])",
              "optionID": {
                ".validate": "newData.isBoolean()"
              },
              "correct": {
                ".validate": "newData.isBoolean()"
              },
              "$other": {
                ".validate": "false"
              },
              ".write": "data.val() == null && (root.child('group-members').child($groupid).child(auth.uid).child('membership-type').val() > 0 && root.child('group-members').child($groupid).child(auth.uid).val() != null || root.child('group-members').child($groupid).child(auth.uid).child('membership-type').val() == 2) || data.val() != null && newData.val() != null && (root.child('group-members').child($groupid).child(auth.uid).child('membership-type').val() > 0 && root.child('group-members').child($groupid).child(auth.uid).val() != null || root.child('group-members').child($groupid).child(auth.uid).child('membership-type').val() == 2)"
            }
          }
        }
      }
    }
  }
}
