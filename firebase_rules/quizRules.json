{
  "rules": {
    "user-question-banks": {
      "$userid": {
        "$questionBankUniqueID": {
          ".validate": "newData.hasChildren(['member-type', 'timestamp'])",
          "member-type": {
            ".validate": "newData.isNumber() && (newData.val() == 1 || newData.val() == 2)"
          },
          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() <= Date.now"
          },
          "$other": {
            ".validate": "false"
          },
          ".write": "data.val() == null && (newData.child('member-type').val() == 1 && (auth != null && auth.uid == UserID)) || data.val() != null && newData.val() != null && (newData.child('member-type').val() == 1 && (auth != null && auth.uid == UserID) || auth != null && (root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid]['member-type'] == 1) && newData.child('member-type').val() == 2)",
          ".read": "root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid] != null"
        }
      }
    },
    "question-bank-memberships": {
      "$questionBankUniqueID": {
        "$UserID": {
          ".validate": "newData.hasChildren(['member-type', 'timestamp'])",
          "member-type": {
            ".validate": "newData.isNumber() && (newData.val() == 1 || newData.val() == 2)"
          },
          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() <= Date.now"
          },
          "$other": {
            ".validate": "false"
          },
          ".write": "data.val() == null && (newData.child('member-type').val() == 1 && (auth != null && auth.uid == $UserID)) || data.val() != null && newData.val() != null && (newData.child('member-type').val() == 1 && (auth != null && auth.uid == $UserID) || auth != null && (root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid]['member-type'] == 1) && newData.child('member-type').val() == 2)",
          ".read": "root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid] != null"
        }
      }
    },
    "question-bank": {
      "$questionBankUniqueID": {
        "chapters": {
          "$chapterId": {
            "topics": {
              "$topicId": {
                "questions": {
                  "$questionId": {
                    "options": {
                      "$key1": {
                        ".validate": "newData.isString()"
                      }
                    },
                    ".validate": "newData.hasChildren(['title', 'type', 'desc'])",
                    "title": {
                      ".validate": "newData.isString()"
                    },
                    "type": {
                      ".validate": "newData.isNumber() && (newData.val() == 1 || newData.val() == 2 || newData.val() == 3)"
                    },
                    "desc": {
                      ".validate": "newData.isString()"
                    },
                    "$other": {
                      ".validate": "false"
                    }
                  }
                },
                ".validate": "newData.hasChildren(['timestamp', 'title', 'desc'])",
                "timestamp": {
                  ".validate": "newData.isNumber() && newData.val() <= Date.now"
                },
                "title": {
                  ".validate": "newData.isString()"
                },
                "desc": {
                  ".validate": "newData.isString()"
                },
                "$other": {
                  ".validate": "false"
                }
              }
            },
            ".validate": "newData.hasChildren(['timestamp', 'title', 'desc'])",
            "timestamp": {
              ".validate": "newData.isNumber() && newData.val() <= Date.now"
            },
            "title": {
              ".validate": "newData.isString()"
            },
            "desc": {
              ".validate": "newData.isString()"
            },
            "$other": {
              ".validate": "false"
            }
          }
        },
        ".validate": "newData.hasChildren(['timestamp', 'title', 'desc', 'created-by'])",
        "timestamp": {
          ".validate": "newData.isNumber() && newData.val() <= Date.now"
        },
        "title": {
          ".validate": "newData.isString()"
        },
        "desc": {
          ".validate": "newData.isString()"
        },
        "created-by": {
          ".validate": "newData.isString()"
        },
        "$other": {
          ".validate": "false"
        },
        ".write": "data.val() == null && auth != null || data.val() != null && newData.val() != null && (newData.child('member-type').val() == 1 && (auth != null && auth.uid == UserID) || root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid] != null && root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid]['member-type'] == 2)",
        ".read": "auth != null && root.child('question').val() - bank - memberships[$questionBankUniqueID][auth.uid] != null"
      }
    }
  }
}
