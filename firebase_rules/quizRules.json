{
  "rules": {
    "user-question-banks": {
      "$UserID": {
        "$questionBankUniqueID": {
          ".validate": "newData.hasChildren(['memberships-type', 'timestamp'])",
          "memberships-type": {
            ".validate": "newData.isNumber() && (newData.val() == 1 || newData.val() == 2)"
          },
          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() <= now"
          },
          "$other": {
            ".validate": "false"
          },
          ".write": "data.val() == null && (newData.child('memberships-type').val() == 1 && (auth != null && auth.uid == $UserID)) || data.val() != null && newData.val() != null && (newData.child('memberships-type').val() == 1 && (auth != null && auth.uid == $UserID) || auth != null && (root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null && root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).child('memberships-type').val() == 1) && newData.child('memberships-type').val() == 2)",
          ".read": "root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null"
        },
        ".read": "auth != null && auth.uid == $UserID"
      }
    },
    "question-bank-memberships": {
      "$questionBankUniqueID": {
        "$UserID": {
          ".validate": "newData.hasChildren(['memberships-type', 'timestamp'])",
          "memberships-type": {
            ".validate": "newData.isNumber() && (newData.val() == 1 || newData.val() == 2)"
          },
          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() <= now"
          },
          "$other": {
            ".validate": "false"
          },
          ".write": "data.val() == null && (newData.child('memberships-type').val() == 1 && (auth != null && auth.uid == $UserID)) || data.val() != null && newData.val() != null && (newData.child('memberships-type').val() == 1 && (auth != null && auth.uid == $UserID) || auth != null && (root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null && root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).child('memberships-type').val() == 1) && newData.child('memberships-type').val() == 2)",
          ".read": "root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null"
        }
      }
    },
    "question-bank": {
      "$questionBankUniqueID": {
        "chapters": {
          "$chapterId": {
            "topics": {
              "$topicId": {
                "questions": {
                  "$questionId": {
                    "questiones": {
                      "$key1": {
                        ".validate": "newData.hasChildren(['title', 'type', 'html', 'discussion-html'])",
                        "title": {
                          ".validate": "newData.isString()"
                        },
                        "type": {
                          ".validate": "newData.isNumber() && (newData.val() == 1 || newData.val() == 2 || newData.val() == 3)"
                        },
                        "html": {
                          ".validate": "newData.isString()"
                        },
                        "options": {
                          "$key2": {
                            ".validate": "newData.hasChildren(['html', 'correct', 'discussion-html'])",
                            "html": {
                              ".validate": "newData.isString()"
                            },
                            "correct": {
                              ".validate": "newData.isBoolean()"
                            },
                            "discussion-html": {
                              ".validate": "newData.isString()"
                            },
                            "$other": {
                              ".validate": "false"
                            }
                          }
                        },
                        "discussion-html": {
                          ".validate": "newData.isString()"
                        },
                        "$other": {
                          ".validate": "false"
                        }
                      }
                    },
                    ".validate": "newData.hasChildren(['title', 'type', 'html', 'discussion-html'])",
                    "title": {
                      ".validate": "newData.isString()"
                    },
                    "type": {
                      ".validate": "newData.isNumber() && (newData.val() == 1 || newData.val() == 2 || newData.val() == 3)"
                    },
                    "html": {
                      ".validate": "newData.isString()"
                    },
                    "options": {
                      "$key2": {
                        ".validate": "newData.hasChildren(['html', 'correct', 'discussion-html'])",
                        "html": {
                          ".validate": "newData.isString()"
                        },
                        "correct": {
                          ".validate": "newData.isBoolean()"
                        },
                        "discussion-html": {
                          ".validate": "newData.isString()"
                        },
                        "$other": {
                          ".validate": "false"
                        }
                      }
                    },
                    "discussion-html": {
                      ".validate": "newData.isString()"
                    },
                    "$other": {
                      ".validate": "false"
                    }
                  }
                },
                ".validate": "newData.hasChildren(['timestamp', 'title', 'desc'])",
                "timestamp": {
                  ".validate": "newData.isNumber() && newData.val() <= now"
                },
                "title": {
                  ".validate": "newData.isString()"
                },
                "desc": {
                  ".validate": "newData.isString()"
                },
                "$other": {
                  ".validate": "false"
                }
              }
            },
            ".validate": "newData.hasChildren(['timestamp', 'title', 'desc'])",
            "timestamp": {
              ".validate": "newData.isNumber() && newData.val() <= now"
            },
            "title": {
              ".validate": "newData.isString()"
            },
            "desc": {
              ".validate": "newData.isString()"
            },
            "$other": {
              ".validate": "false"
            }
          }
        },
        ".validate": "newData.hasChildren(['timestamp', 'title', 'desc', 'imgLogoUrl'])",
        "timestamp": {
          ".validate": "newData.isNumber() && newData.val() <= now"
        },
        "title": {
          ".validate": "newData.isString()"
        },
        "desc": {
          ".validate": "newData.isString()"
        },
        "imgLogoUrl": {
          ".validate": "newData.isString()"
        },
        "$other": {
          ".validate": "false"
        },
        ".write": "data.val() == null && auth != null || data.val() != null && newData.val() != null && (root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null && root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).child('memberships-type').val() == 1 || root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null && root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).child('memberships-type').val() == 2)",
        ".read": "auth != null && root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null"
      }
    },
    "answers": {
      "$userid": {
        "$quizId": {
          "$answerId": {
            "$questionId": {
              "$optionId": {
                ".validate": "newData.isBoolean()"
              }
            }
          }
        }
      }
    },
    "answer-user": {
      "$userId": {
        "$groupid": {
          "$subgroupid": {
            "$quizId": {
              "$answerId": {
                "$questionId": {
                  "$optionId": {
                    ".validate": "newData.isBoolean()",
                    ".read": "auth != null && auth.uid == $userId || root.child('subgroup-members').child($groupid).child($subgroupid).child(auth.uid).child('membership-type').val() == 1 || root.child('subgroup-members').child($groupid).child($subgroupid).child(auth.uid).child('membership-type').val() == 2"
                  }
                }
              }
            }
          }
        }
      }
    },
    "quizes": {
      "$quizId": {
        "$questionBankUniqueID": {
          "$chapterId": {
            "$topicId": {
              "$questionId": {
                ".validate": "newData.hasChildren(['title', 'type', 'desc'])",
                "title": {
                  ".validate": "newData.isString()"
                },
                "type": {
                  ".validate": "newData.isNumber() && (newData.val() == 1 || newData.val() == 2 || newData.val() == 3)"
                },
                "desc": {
                  ".validate": "newData.isString()"
                },
                "options": {
                  "$key2": {
                    ".validate": "newData.hasChildren(['html', 'correct', 'discussion-html'])",
                    "html": {
                      ".validate": "newData.isString()"
                    },
                    "correct": {
                      ".validate": "newData.isBoolean()"
                    },
                    "discussion-html": {
                      ".validate": "newData.isString()"
                    },
                    "$other": {
                      ".validate": "false"
                    }
                  }
                },
                "$other": {
                  ".validate": "false"
                },
                ".write": "data.val() == null && (root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null && root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).child('memberships-type').val() == 1 || root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null && root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).child('memberships-type').val() == 2) || data.val() != null && newData.val() != null && (root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null && root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).child('memberships-type').val() == 1 || root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null && root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).child('memberships-type').val() == 2)",
                ".read": "root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null"
              }
            }
          }
        }
      }
    },
    "quiz-in-progress": {
      "$groupId": {
        "$subgroupId": {
          "$quizId": {
            ".validate": "newData.isBoolean()",
            ".write": "data.val() == null && root.child('quizes').child(auth.uid).child($quizId).child('memberships-type').val() == 1 || data.val() != null && newData.val() != null && root.child('quizes').child(auth.uid).child($quizId).child('memberships-type').val() == 1"
          }
        }
      }
    },
    "quiz-schedule": {
      "$groupid": {
        "$subgroupid": {
          "$quizId": {
            ".validate": "newData.hasChildren(['title', 'duration', 'start-time', 'num-questions'])",
            "title": {
              ".validate": "newData.isString()"
            },
            "duration": {
              ".validate": "newData.isNumber()"
            },
            "start-time": {
              ".validate": "newData.isNumber()"
            },
            "num-questions": {
              ".validate": "newData.isNumber()"
            },
            "$other": {
              ".validate": "false"
            },
            ".write": "data.val() == null && (root.child('subgroup-members').child($groupid).child($subgroupid).child(auth.uid).child('membership-type').val() == 1 || root.child('subgroup-members').child($groupid).child($subgroupid).child(auth.uid).child('membership-type').val() == 2) || data.val() != null && newData.val() != null && (root.child('subgroup-members').child($groupid).child($subgroupid).child(auth.uid).child('membership-type').val() == 1 || root.child('subgroup-members').child($groupid).child($subgroupid).child(auth.uid).child('membership-type').val() == 2)",
            ".read": "root.child('subgroup-members').child($groupid).child($subgroupid).child(auth.uid).child('membership-type').val() > 0"
          }
        }
      }
    },
    "quiz-proctoringkey": {
      "$quizid": {
        "key": {
          ".validate": "newData.isBoolean()"
        }
      }
    },
    "quiz-result": {
      "$userId": {
        "$groupId": {
          "$subgroupId": {
            "$quizId": {
              "$answerId": {
                "$chapterId": {
                  "$topicId": {
                    "$questionId": {
                      ".validate": "newData.isBoolean()",
                      ".read": "auth != null && auth.uid == $userId"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "quiz-answer": {
      "$quizId": {
        "$questionBankUniqueID": {
          "$chapterId": {
            "$topicId": {
              "$questionId": {
                "$optionId": {
                  ".validate": "newData.isBoolean()",
                  ".write": "data.val() == null && (root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null && root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).child('memberships-type').val() == 1 || root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null && root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).child('memberships-type').val() == 2) || data.val() != null && newData.val() != null && (root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null && root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).child('memberships-type').val() == 1 || root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null && root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).child('memberships-type').val() == 2)",
                  ".read": "root.child('question-bank-memberships').child($questionBankUniqueID).child(auth.uid).val() != null"
                }
              }
            }
          }
        }
      }
    },
    "user-quiz": {
      "$userId": {
        "$quizId": {
          ".validate": "newData.hasChildren(['memberships-type', 'timestamp'])",
          "memberships-type": {
            ".validate": "newData.isNumber()"
          },
          "timestamp": {
            ".validate": "newData.isNumber() && newData.val() <= now"
          },
          "$other": {
            ".validate": "false"
          },
          ".write": "data.val() == null && (auth != null && auth.uid == $userId)",
          ".read": "auth != null && auth.uid == $userId"
        }
      }
    }
  }
}