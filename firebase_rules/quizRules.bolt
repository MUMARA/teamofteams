function isSignedIn() {
    return auth != null
}

//----------------------------------
// Define isCurrentUser() function to test if the given user id
// matches the currently signed-in user.
//----------------------------------
function isCurrentUser(uid) {
    return isSignedIn() && auth.uid == uid
}
/*
function isAuthenticatedUser(userid) {
  return auth != null && auth.uid == userid;
}
type CurrentTimeStamp extends Number {
  validate() {    this <= Date.now; }
}*/

//-----------------------------------------------------------------------------------
//       MemberType type extends globally and MemberType Number Validations Should Be
//-----------------------------------------------------------------------------------
function memberTypeShouldBe(that , num){
    return that  == num;
}

type QuestionBankMember extends Number {

    validate(){
        memberTypeShouldBe(this , 1) || memberTypeShouldBe(this , 2); // Owner = 1, Admin = 2
    }

}

function isQuestionBankOwner(questionBankMember) {
    return memberTypeShouldBe(questionBankMember , 1)
}

function isQuestionBankOwnerAppointingAdmin(questionBankUniqueID, value){
   return isSignedIn() && isCurrentUserQuestionBankOwner(questionBankUniqueID) && memberTypeShouldBe(value["memberships-type"], 2);
}

function isCurrentUserQuestionBankOwner(questionBankUniqueID) {
    return isCurrentUserQuestionBankMember(questionBankUniqueID) &&
    prior(memberTypeShouldBe(root['question-bank-memberships'][questionBankUniqueID][auth.uid]["memberships-type"], 1));
}
function isCurrentUserQuestionBankAdmin(questionBankUniqueID) {
    return isCurrentUserQuestionBankMember(questionBankUniqueID) &&
    prior(memberTypeShouldBe(root['question-bank-memberships'][questionBankUniqueID][auth.uid]["memberships-type"], 2));
}

function isCurrentUserQuestionBankMember(questionBankUniqueID) {
    prior(root['question-bank-memberships'][questionBankUniqueID][auth.uid] != null)
}



//----------------------------------
// Define function to test if the Question Bank Owner himself creating it for the first time
//----------------------------------

function isQuestionBankOwnerCreating(pathUserID, value) {
    return isQuestionBankOwner(value["memberships-type"]) &&  isCurrentUser(pathUserID);
}

//----------------------------------
//      question-bank-memberships (Before creating a QuestionBank, create a owner membership first)
//----------------------------------
/*path /user-question-banks/{UserID}/{questionBankUniqueID} is QuestionBankMembership {
      read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
      create() { isQuestionBankOwnerCreating(UserID, this) }
      update() { isQuestionBankOwnerCreating(UserID, this)  || isQuestionBankOwnerAppointingAdmin(questionBankUniqueID, this) }*/
path /user-question-banks/{userid}{
    /{questionBankUniqueID} is QuestionBankMembership {
          read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
          create() { isQuestionBankOwnerCreating(userid, this) }
          update() { isQuestionBankOwnerCreating(userid, this)  || isQuestionBankOwnerAppointingAdmin(questionBankUniqueID, this) }
    }
}
//----------------------------------
//      question-bank-memberships (Before creating a QuestionBank, create a owner membership first)
//----------------------------------

path /question-bank-memberships/{questionBankUniqueID}/{UserID} is QuestionBankMembership {
    read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
    create() { isQuestionBankOwnerCreating(UserID, this) }
    update() { isQuestionBankOwnerCreating(UserID, this)  || isQuestionBankOwnerAppointingAdmin(questionBankUniqueID, this) }
}

type QuestionBankMembership {
    "memberships-type" : QuestionBankMember,
    timestamp: CurrentTimeStamp                     //MemberType type extends globally
}


//----------------------------------
//      question-bank (Before creating a QuestionBank, create a owner membership first)
//----------------------------------
path /question-bank/{questionBankUniqueID} is QuestionBank {
  read() { isSignedIn() && isCurrentUserQuestionBankMember(questionBankUniqueID) }
  create() { isSignedIn() }
  update() {  isCurrentUserQuestionBankOwner(questionBankUniqueID) ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID)  }
    /chapters/{chapterId} is ChapterAndTopic {
        /topics/{topicId} is ChapterAndTopic {
            /questions/{questionId} is Question {
            }
        }
    }
}
type QuestionBank {

    timestamp  : CurrentTimeStamp,                   //Timestamp type extends globally
    title    : String,
    desc     : String
}
type ChapterAndTopic {
    timestamp  : CurrentTimeStamp,                   //Timestamp type extends globally
    title    : String,
    desc     : String
}
type Question {
   title: String,
   type: QuestionType, //QuestionTupe
   html: String,
  options: Option[] | Null,
  questiones: QuestionSet[] | Null,
  "discussion-html" : String
}
type QuestionSet {
   title: String,
   type: QuestionType, //QuestionTupe
   html: String,
   options: Option[] | Null,
   "discussion-html" : String
}
type Option {
  "html": String,
  "correct": Boolean,
  "discussion-html" : String
}
//-----------------------------------------------------------
// Options Type 1 Radio Button , 2 CheckBox And 3 question Set
//---------------------------------------------------------

function optionsTypeShouldBe(that , num) {
    return that == num
}

type QuestionType extends Number{
   validate() {
   optionsTypeShouldBe(this , 1 ) || optionsTypeShouldBe(this , 2 ) || optionsTypeShouldBe(this , 3 );
   }
}


 //Discuss
//----------------------------------
//      Question Bank Quizes
//----------------------------------
/*
path /question-bank-quizes/{questionBankUniqueID} is QuestionBankQuiz {
  read() { isSignedIn() && isCurrentUserQuestionBankMember(questionBankUniqueID) }
  create() { isSignedIn() }
  update() { isQuestionBankOwnerCreating(UserID, this)  ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
}

type QuestionBankQuiz {

    validate(){this.hasChildren(['quizID'])}
    $quizID : Boolean
}*/

//----------------------------------
//      Group Quizes
//----------------------------------

path /group-quizes/{groupid}/{quizId} {
 read() {   isSignedIn() &&  groupMemberShipAnyType(groupid) }
 create() {groupMemberShipAnyType(groupid) && isGroupMembersIdExist($groupid) || isCurrentUserGroupMembersAdmin($groupid) }
 update() {groupMemberShipAnyType(groupid) && isGroupMembersIdExist($groupid) || isCurrentUserGroupMembersAdmin($groupid) }
          /options is String[] { }
}

//===================================
//function For Group-member
/*//===================================

function isGroupMembersIdExist($groupid) {
  return prior(root['group-members'][$groupid][auth.uid] != null);
}

functiongroupMemberShipAnyType(groupid) {
    return prior(root['group-members'][$groupid][auth.uid]['memberships-type'].val() > 0);
 }

function isCurrentUserGroupMembersOwner($groupid) {
    return  prior(root['group-members'][$groupid][auth.uid]['memberships-type'].val() == 1 )
 }


 function isCurrentUserGroupMembersAdmin($groupid) {
    return  prior(root['group-members'][$groupid][auth.uid]['memberships-type'].val() == 2 )
 }*/

//----------------------------------
//      Quizes
//----------------------------------

//path /quizes/{quizID}  is QuizDesc {
//  read() { isSignedIn() && isCurrentUserQuestionBankMember(questionBankUniqueID) }
 // create() { isQuestionBankOwnerCreating(UserID, this)  ||
  //           isCurrentUserQuestionBankAdmin(questionBankUniqueID)  }
  //update() { isQuestionBankOwnerCreating(UserID, this)  ||
   //          isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
//}

//type QuizDesc {
  //  title           : String,
   // desc            : String,
    //duration        : Number,
 //   'num-questions' : Number

//}

path /user-quiz/{userId}/{quizId} is QuizMembership {
      read() { isAuthenticatedUser(userId) }
      create() { isAuthenticatedUser(userId) }
}


type QuizMembership {
  "memberships-type": Number,
  timestamp: CurrentTimeStamp
}
function isQuizOwner(quizId) {
  return prior(root["quizes"][auth.uid][quizId]["memberships-type"].val() == 1)
}
//----------------------------------
//     rules for QUIZES
//----------------------------------

path /answers/{userid}/{quizId}/{answerId}/{questionId}/{optionId} is Boolean { }



/*path /quizes/{questionBankUniqueID}/{quizID} is Quiz {
    validate() { this.hasChildren(['questions']) }*/

//--------------------------
//  Answer User
//--------------------------
// move in securityRules.bolt
path /answer-user/{userId}/{groupid}/{subgroupid}/{quizId}/{answerId}/{questionId}/{optionId} is Boolean {  }

//--------------------------
//  Quiz In Progress  // move in securityRules.bolt
//--------------------------

path /quiz-in-progress/{groupid}/{subgroupid}/{quizId} is Boolean {
  create() { isQuizOwner(quizId) }
  update() { isQuizOwner(quizId) }
 }

//--------------------------
//  Quizes Questions // move in securityRules.bolt
//--------------------------

path /quizes/{quizId}/{questionBankUniqueID}/{chapterId}/{topicId}/{questionId} is QuizQuestionDesc {
  read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
  create() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
  update() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) } }


type QuizQuestionDesc {

   title   : String,
   type    : QuestionType,
   desc    : String,
   options : Option[]
}
//--------------------------
//  Quizes Answer  // // move in securityRules.bolt
//--------------------------
path /quiz-answer/{quizId}/{questionBankUniqueID}/{chapterId}/{topicId}/{questionId}/{optionId} is Boolean {
      read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
      create() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
      update() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
     }


//--------------------------
//  Answer User
//--------------------------
// // move in securityRules.bolt
path /quiz-result/{userid}/{groupid}/{subgroupid}/{quizId}/{answerId}/{chapterId}/{topicId}/{questionId} is Boolean {
    read() { isAuthenticatedUser(userid) }
 }
// // move in securityRules.bolt
path /quiz-proctoringkey/{quizid}/key is Boolean { }
// // move in securityRules.bolt
path /quiz-schedule/{groupid}/{subgroupid}/{quizId} is Schedules {

}

type Schedules {
  title: String,
  duration: Number,
  "start-time": Number,
  "num-questions": Number
}
/*



path /quizes/{questionBankUniqueID}/{quizID} is Quiz {
    validate() {this.hasChildren(['questions']);}

    /questions/{chapterID}/{topicID}/{questionID} is Boolean {

    read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
    create() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
    update() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
   }
}
//----------------------------------
//     Type Quiz
//----------------------------------

type Quiz{
    title: String,
    description: String,
    duration: Number

}
//----------------------------------
//      Quiz Questions
//----------------------------------

path /quiz-questions/{quizID}/{questionID} is QuizQuestionDesc {
  read() { isSignedIn() && isCurrentUserQuestionBankMember(questionBankUniqueID) }
  create() { isCurrentUserQuestionBankOwner(questionBankUniqueID)   ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID)  }
  update() { isCurrentUserQuestionBankOwner(questionBankUniqueID)   ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
}


//----------------------------------
//      Quiz Answers
//----------------------------------


path /quiz-answers/{quizID}/{questionID} is QuizAnswerDesc {
  read() { isSignedIn() && isCurrentUserQuestionBankMember(questionBankUniqueID) }
  create() { isCurrentUserQuestionBankOwner(questionBankUniqueID)   ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID)  }
  update() { isCurrentUserQuestionBankOwner(questionBankUniqueID)   ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID) }}

type QuizAnswerDesc {
   title              : String,
   type               : QuestionType,
   'desc-html'        : String,
   'discussion-html'  : String,
    options            : Option[]
}*/
