
//----------------------------------
// Define isCurrentUser() function to test if the given user id
// matches the currently signed-in user.
//----------------------------------

/*function isAuthenticatedUser(userid) {
  return auth != null && auth.uid == userid;
}

function isAuthenticated() {
    return auth != null;
}

type CurrentTimeStamp extends Number {
  validate() {    this <= now; }
}*/

// Quiz Rules
//-----------------------------------------------------------------------------------
//       MemberType type extends globally and MemberType Number Validations Should Be
//-----------------------------------------------------------------------------------
function memberTypeShouldBe(that , num){
    return that  == num;
}

type QuestionBankMember extends Number {

    validate(){
        memberTypeShouldBe(this , 1) || memberTypeShouldBe(this , 2); // Owner = 1, Admin = 2
    }

}

function isQuestionBankOwner(questionBankMember) {
    return memberTypeShouldBe(questionBankMember , 1)
}

function isQuestionBankOwnerAppointingAdmin(questionBankUniqueID, value){
   return isAuthenticated() && isCurrentUserQuestionBankOwner(questionBankUniqueID) && memberTypeShouldBe(value["memberships-type"], 2);
}

function isCurrentUserQuestionBankOwner(questionBankUniqueID) {
    return isCurrentUserQuestionBankMember(questionBankUniqueID) &&
    prior(memberTypeShouldBe(root["question-bank-memberships"][questionBankUniqueID][auth.uid]["memberships-type"], 1));
}
function isCurrentUserQuestionBankAdmin(questionBankUniqueID) {
    return isCurrentUserQuestionBankMember(questionBankUniqueID) &&
    prior(memberTypeShouldBe(root["question-bank-memberships"][questionBankUniqueID][auth.uid]["memberships-type"], 2));
}

function isCurrentUserQuestionBankMember(questionBankUniqueID) {
    prior(root["question-bank-memberships"][questionBankUniqueID][auth.uid].val() != null)
}

//---------------------------------------------------
//         Function For SubGroup
//----------------------------------------------------

/*function  isSubGroupMembersSubGroupIdAuthIDMemberShipTypeExist($groupid,$subgroupid) {
  return prior(root['subgroup-members'][$groupid][$subgroupid][auth.uid]['membership-type'].val() != null)
}

function isSubGroupMembersSubGroupIdAuthIDExist($groupid ,$subgroupid) {
 return prior(root['subgroup-members'][$groupid][$subgroupid][auth.uid].val() != null )
}



function subGroupMembersMemberShipAnyType($groupid,$subgroupid) {
  return prior(root['subgroup-members'][$groupid][$subgroupid][auth.uid]['membership-type'].val() > 0)
}


function isCurrentSubUserGroupMembersOwner($groupid,$subgroupid) {
 return prior(root['subgroup-members'][$groupid][$subgroupid][auth.uid]['membership-type'].val() == 1)
}

function isCurrentSubUserGroupMembersAdmin($groupid,$subgroupid) {
 return prior(root['subgroup-members'][$groupid][$subgroupid][auth.uid]['membership-type'].val() == 2)
}*/



//----------------------------------
// Define function to test if the Question Bank Owner himself creating it for the first time
//----------------------------------

function isQuestionBankOwnerCreating(pathUserID, value) {
    return isQuestionBankOwner(value["memberships-type"]) &&  isAuthenticatedUser(pathUserID);
}

//----------------------------------
//      question-bank-memberships (Before creating a QuestionBank, create a owner membership first)
//----------------------------------
path /user-question-banks/{UserID} {
  read()   { isAuthenticatedUser(UserID) }
  /{questionBankUniqueID} is QuestionBankMembership {
      read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
      create() { isQuestionBankOwnerCreating(UserID, this) }
      update() { isQuestionBankOwnerCreating(UserID, this)  || isQuestionBankOwnerAppointingAdmin(questionBankUniqueID, this) }
  }
}
//----------------------------------
//      question-bank-memberships (Before creating a QuestionBank, create a owner membership first)
//----------------------------------

path /question-bank-memberships/{questionBankUniqueID}/{UserID} is QuestionBankMembership {
    read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
    create() { isQuestionBankOwnerCreating(UserID, this) }
    update() { isQuestionBankOwnerCreating(UserID, this)  || isQuestionBankOwnerAppointingAdmin(questionBankUniqueID, this) }
}

type QuestionBankMembership {
    "memberships-type" : QuestionBankMember,
     timestamp: CurrentTimeStamp                     //MemberType type extends globally
}

path /question-bank-names {
    read() {
      isAuthenticated()
    }

  /{questionBankUniqueID} is QuestionBankName {
    create() {
      isAuthenticated()
    }
  }


}
type QuestionBankName {
  title: String
}
//----------------------------------
//      question-bank (Before creating a QuestionBank, create a owner membership first)
//----------------------------------
path /question-bank/{questionBankUniqueID} is QuestionBank {
  read() { isAuthenticated() && isCurrentUserQuestionBankMember(questionBankUniqueID) }
  create() { isAuthenticated() }
  update() { isCurrentUserQuestionBankOwner(questionBankUniqueID) ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID)  }
              /chapters/{chapterId} is Chapter {
                  /topics/{topicId} is Topic {
                      /questions/{questionId} is Question {
                    //  /options is  Option[] { }
                      /questiones is QuestionSet[] {}
                     }
                  }
              }
}
type QuestionBank {
    timestamp  : CurrentTimeStamp,                   //Timestamp type extends globally
    title    : String,
    desc     : String,
    imgLogoUrl: String  | Null
}
type Chapter {
    timestamp  : CurrentTimeStamp,                   //Timestamp type extends globally
    title    : String,
    desc     : String
}
type Topic {
    timestamp  : CurrentTimeStamp,                   //Timestamp type extends globally
    title    : String,
    desc     : String
}
type Question {
   title: String,
   type: QuestionType, //QuestionTupe
   html: String,
   options: Map<String, Option>,
  // questiones: QuestionSet[] | Null,
   "discussion" : String
}
type QuestionSet {
   type: QuestionType, //QuestionTupe
   html: String,
   options: Map<String, Option>,
   "discussion" : String
}
type Option {
  "html": String,
  "correct": Boolean,
  "discussion" : String
}
//-----------------------------------------------------------
// Options Type 1 Radio Button , 2 CheckBox And 3 question Set
//---------------------------------------------------------

function optionsTypeShouldBe(that , num) {
    return that == num
}

type QuestionType extends Number{
   validate() {
   optionsTypeShouldBe(this , 1 ) || optionsTypeShouldBe(this , 2 ) || optionsTypeShouldBe(this , 3 );
   }
}


//----------------------------------
//     rules for QUIZES
//----------------------------------

path /answers/{userid}/{quizId}/{answerId}/{questionId}/{optionId} is Boolean { }

//--------------------------
//  Answer User
//--------------------------

path /answer-user/{userId}/{groupid}/{subgroupid}/{quizId}/{answerId}/{questionId}/{optionId} is Boolean {
read()  {  isAuthenticatedUser(userId) ||  isCurrentSubUserGroupMembersOwner($groupid,$subgroupid) ||
          isCurrentSubUserGroupMembersAdmin($groupid,$subgroupid)}  }
create() {  isAuthenticatedUser(userId)}
//--------------------------
//  Quizes Names
//--------------------------
path /quiz-name {
  read() { isAuthenticated() }
  /{quizId} is QuizName {
    create() { isAuthenticated() }
  }
}
type QuizName {
  title: String
}
//--------------------------
//  Quizes
//--------------------------

/*/questions/{questionId}  is QuizQuestionDesc{
read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
create() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
update() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
}*/

path /quizes/{quizId} is Quiz {
      read() { isQuizOwner(quizId) }
      create() { isQuizOwner(quizId) }
      update() { isQuizOwner(quizId) }
      /questionbanks/{questionBankUniqueID} is QuizQuestionBank {
        /chapters/{chapterId}  is QuizChapter {
          /topics/{topicId} is QuizTopic  {
            /questions/{questionId} is Question {
          //  /options is  Option[] { }
            /questiones is QuestionSet[] { }
           }
        }
      }
    }
}


type Quiz {
  title: String,
  desc: String,
  duration: Number,
  "num-questions": Number,
  imgLogoUrl: String | Null
}
type QuizQuestionBank {
  title: String,
  imgLogoUrl: String | Null
}

type QuizChapter {
  title: String
}
type QuizTopic {
  title: String,
}
//--------------------------
//  Quiz In Progress
//--------------------------
path /quiz-in-progress/{groupId}/{subgroupId}/{quizId} is Boolean {
  create() { isQuizOwner(quizId) }
  update() { isQuizOwner(quizId) }
}
//--------------------------
//  Quiz Schedules
//--------------------------
path /quiz-schedule/{groupid}/{subgroupid}/{quizId} is QuizSchedule {
    /{scheduleId} is Schedules {
      read() { subGroupMembersMemberShipAnyType($groupid,$subgroupid) }
      create() { isCurrentSubUserGroupMembersOwner($groupid,$subgroupid) || isCurrentSubUserGroupMembersAdmin($groupid,$subgroupid) }
      update() { isCurrentSubUserGroupMembersOwner($groupid,$subgroupid) || isCurrentSubUserGroupMembersAdmin($groupid,$subgroupid) }
    }
}

type QuizSchedule {
  title: String,
  desc: String,
  imgLogoUrl: String,
  duration: Number,
  "num-questions": Number
}
type Schedules {
  "start-time": Number,
  "end-time": Number,
}
//--------------------------
//  Quiz Proctoring Key
//--------------------------
path /quiz-proctoringkey/{quizid}/key is Boolean { }

//--------------------------
//  Answer User
//--------------------------

path /quiz-result/{userId}/{groupId}/{subgroupId}/{quizId}/{answerId}/{chapterId}/{topicId}/{questionId} is Boolean {
    read() { isAuthenticatedUser(userId) }
 }

//--------------------------
//  Quizes Answer
//--------------------------
path /quiz-answer/{quizId}/{questionBankUniqueID}/{chapterId}/{topicId}/{questionId}/{optionId} is Boolean {
   read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
   create() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
   update() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
  }
//--------------------------
//  Quizes Questions
/*//--------------------------

path /quizes/{quizId}/{questionBankUniqueID}/{chapterId}/{topicId}/{questionId} is QuizQuestionDesc {
  read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
  create() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
  update() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) } }*/


//--------------------------
//  User Quizes
//--------------------------
path /user-quiz/{userId} {
  read() { isAuthenticatedUser(userId) }
    /{quizId} is QuizMembership {
      read() { isQuizOwner(quizId) }
      create() { isQuestionBankOwnerCreating(userId, this) }
   }
}


type QuizMembership {
  "memberships-type": Number,
   timestamp: CurrentTimeStamp,
}
function isQuizOwner(quizId) {
  return prior(root["user-quiz"][auth.uid][quizId]["memberships-type"].val() == 1)
}
//===========================================================  23/1/16
