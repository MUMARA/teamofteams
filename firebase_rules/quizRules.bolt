function isSignedIn() {
    return auth != null
}

//----------------------------------
// Define isCurrentUser() function to test if the given user id
// matches the currently signed-in user.
//----------------------------------

function isCurrentUser(uid) {
    return isSignedIn() && auth.uid == uid
}

type CurrentTimestamp extends Number {
  validate() {    this <= Date.now; }
}

//----------------------------------
// Define createOnly() function to test if it is being created for the first time
//----------------------------------
/*function createOnly(value) {
    return prior(value) == null && value != null
}*/
//-----------------------------------------------------------------------------------
//       MemberType type extends globally and MemberType Number Validations Should Be
//-----------------------------------------------------------------------------------
function memberTypeShouldBe(that , num){
    return that  == num;
}

type QuestionBankMemberType extends Number {

    validate(){
        memberTypeShouldBe(this , 1) || memberTypeShouldBe(this , 2); // Owner = 1, Admin = 2
    }

}

function isQuestionBankOwner(questionBankMemberType) {
    return memberTypeShouldBe(questionBankMemberType , 1)
}

function isQuestionBankOwnerAppointingAdmin(questionBankUniqueID, value){
   return isSignedIn() && isCurrentUserQuestionBankOwner(questionBankUniqueID) && memberTypeShouldBe(value["member-type"], 2);
}

function isCurrentUserQuestionBankOwner(questionBankUniqueID) {
    return isCurrentUserQuestionBankMember(questionBankUniqueID) &&
    prior(memberTypeShouldBe(root.question-bank-memberships[questionBankUniqueID][auth.uid]["member-type"], 1));
}
function isCurrentUserQuestionBankAdmin(questionBankUniqueID) {
    return isCurrentUserQuestionBankMember(questionBankUniqueID) &&
    prior(memberTypeShouldBe(root.question-bank-memberships[questionBankUniqueID][auth.uid]["member-type"], 2));
}

function isCurrentUserQuestionBankMember(questionBankUniqueID) {
    prior(root.question-bank-memberships[questionBankUniqueID][auth.uid] != null)
}



//----------------------------------
// Define function to test if the Question Bank Owner himself creating it for the first time
//----------------------------------

function isQuestionBankOwnerCreating(pathUserID, value) {
    return isQuestionBankOwner(value.member-type) &&  isCurrentUser(pathUserID);
}

//----------------------------------
//      question-bank-memberships (Before creating a QuestionBank, create a owner membership first)
//----------------------------------
path /user-question-banks/{userid}/{questionBankUniqueID} is QuestionBankMembership {
      read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
      create() { isQuestionBankOwnerCreating(UserID, this) }
      update() { isQuestionBankOwnerCreating(UserID, this)  || isQuestionBankOwnerAppointingAdmin(questionBankUniqueID, this) }
}
//----------------------------------
//      question-bank-memberships (Before creating a QuestionBank, create a owner membership first)
//----------------------------------

path /question-bank-memberships/{questionBankUniqueID}/{UserID} is QuestionBankMembership {
    read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
    create() { isQuestionBankOwnerCreating(UserID, this) }
    update() { isQuestionBankOwnerCreating(UserID, this)  || isQuestionBankOwnerAppointingAdmin(questionBankUniqueID, this) }
}

type QuestionBankMembership {
    "member-type" : QuestionBankMemberType                      //MemberType type extends globally
}


//----------------------------------
//      question-bank (Before creating a QuestionBank, create a owner membership first)
//----------------------------------

path /question-bank/{questionBankUniqueID} is QuestionBank {
    read() { isSignedIn() && isCurrentUserQuestionBankMember(questionBankUniqueID) }
    create() { isSignedIn() }
    update() { isQuestionBankOwnerCreating(UserID, this)  ||
               isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
}

type QuestionBank {

    timestamp  : CurrentTimestamp,                   //Timestamp type extends globally
      title    : String,
      desc     : String

}

//-----------------------------------------------------------
// Options Type Radio Button , CheckBox And question Set
//---------------------------------------------------------

function optionsTypeShouldBe(that , num) {
    return that == num
}

type OptionType extends Number{
   validate() {
   optionsTypeShouldBe(this , 1 ) || optionsTypeShouldBe(this , 2 ) || optionsTypeShouldBe(this , 3 );
   }
}

//----------------------------------
//      question-bank-topics
//----------------------------------\
//----------------------------------
//      rules for question bank topics & AutoSubTopicID
//----------------------------------
path /question-bank-topics/{questionBankUniqueID}/{autotopicid} is QuestionBankTopicsType {
 //?
    /subtopics {

        validate() {this.hasChildren(['autoSubTopicID']);}
        /{autoSubTopicID} is AutoSubTopicID {
          /questions/{questionID}{
                    validate() { this.isBoolean() }
                }
              }
            }

    /question/{questionID} is Boolean{ }


}

//----------------------------------
//      type definition for QuestionBankTopicsType
//----------------------------------
type QuestionBankTopicsType{
    timestamp: CurrentTimestamp,
    title: String,
    desc: String,
    subtopics: Object,
    question: Object
}


//----------------------------------
//      type definition for AutoSubTopicID
//----------------------------------

type AutoSubTopicID {

    timestamp: CurrentTimestamp,
    title: String,
    desc: String,
    questions: Object

}


//----------------------------------
//      Question Bank Quizes
//----------------------------------

path /question-bank-quizes/{questionBankID} is QuestionBankQuiz {
  read() { isSignedIn() && isCurrentUserQuestionBankMember(questionBankUniqueID) }
  create() { isSignedIn() }
  update() { isQuestionBankOwnerCreating(UserID, this)  ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
}

type QuestionBankQuiz {

    validate(){this.hasChildren(['quizID'])}
    $quizID : Boolean
}

//----------------------------------
//      Group Quizes
//----------------------------------

path /group-quizes/{groupID} is QuestionBankQuiz {
 read() { isSignedIn() &&  groupMemberShipAnyType($groupid) }
 create() { groupMemberShipAnyType($groupid) && isGroupMembersIdExist($groupid) || isCurrentUserGroupMembersAdmin($groupid) }
 update() { groupMemberShipAnyType($groupid) && isGroupMembersIdExist($groupid) || isCurrentUserGroupMembersAdmin($groupid) }
}

//===================================
//function For Group-member
//===================================

function isGroupMembersIdExist($groupid) {
  return prior(root['group-members'][$groupid][auth.uid] != null);
}

function groupMemberShipAnyType($groupid) {
    return prior(root['group-members'][$groupid][auth.uid]['membership-type'].val() > 0)
 }

function isCurrentUserGroupMembersOwner($groupid) {
    return  prior(root['group-members'][$groupid][auth.uid]['membership-type'].val() == 1 )
 }


 function isCurrentUserGroupMembersAdmin($groupid) {
    return  prior(root['group-members'][$groupid][auth.uid]['membership-type'].val() ==2 )
 }

//----------------------------------
//      Quizes
//----------------------------------

path /quizes/{quizID}  is QuizDesc {
  read() { isSignedIn() && isCurrentUserQuestionBankMember(questionBankUniqueID) }
  create() { isQuestionBankOwnerCreating(UserID, this)  ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID)  }
  update() { isQuestionBankOwnerCreating(UserID, this)  ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
}

type QuizDesc {
    title           : String,
    desc            : String,
    duration        : Number,
    'num-questions' : Number

}

//----------------------------------
//      Quiz Topics
//----------------------------------
path /quiz-topics/{quizID}/{autotopicID} is QuestionBankTopicsType{
  read() { isSignedIn() && isCurrentUserQuestionBankMember(questionBankUniqueID) }
  create() { isQuestionBankOwnerCreating(UserID, this)  ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID)  }
  update() { isQuestionBankOwnerCreating(UserID, this)  ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
    /subtopics {

        validate() {this.hasChildren(['autoSubTopicID']);}
        /{autoSubTopicID} is AutoSubTopicID{
        /questions/{questions}{
                    validate() { this.isBoolean() }
          }
        }
     }

    /questions/{questionsID} is Boolean{ }
}

//----------------------------------
//      Quiz Questions
//----------------------------------

path /quiz-questions/{quizID}/{questionID} is QuizQuestionDesc {
  read() { isSignedIn() && isCurrentUserQuestionBankMember(questionBankUniqueID) }
  create() { isQuestionBankOwnerCreating(UserID, this)  ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID)  }
  update() { isQuestionBankOwnerCreating(UserID, this)  ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
}

type QuizQuestionDesc {

   title   : String,
   type    : OptionType,
   desc    : String,
   options : QuestionOptions
}

type QuestionOptions {
 validate(){ this.hasChildren(['optionID'])}
   $optionID : Object
}


//----------------------------------
//      Quiz Answers
//----------------------------------


path /quiz-answers/{quizID}/{questionID} is QuizAnswerDesc {
  read() { isSignedIn() && isCurrentUserQuestionBankMember(questionBankUniqueID) }
  create() { isQuestionBankOwnerCreating(UserID, this)  ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID)  }
  update() { isQuestionBankOwnerCreating(UserID, this)  ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID) }}

type QuizAnswerDesc {
   title              : String,
   type               : OptionType,
   'desc-html'        :  String,
   'discussion-html'  : String,
   options            : AnswerOptions
}

type AnswerOptions {
    validate() {this.hasChildren(['optionID'])}
    $optionID   : OptionsDetail
}

 type OptionsDetail {
    html              : String,
    correct           : Boolean,
    'discussion-html' : String
 }



//----------------------------------
//      Quiz Answer Sheet
//----------------------------------

path /quiz-answer-sheet/{groupid}/{quizid}/{userid}/{questionID} is  CorrectAnswer {
  create() { groupMemberShipAnyType($groupid) && isGroupMembersIdExist($groupid) || isCurrentUserGroupMembersAdmin($groupid) }
  update() { groupMemberShipAnyType($groupid) && isGroupMembersIdExist($groupid) || isCurrentUserGroupMembersAdmin($groupid) }
 }

 type CorrectAnswer {
   optionID : Boolean,
   correct  :  Boolean
  }
