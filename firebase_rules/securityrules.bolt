//when parent and child write false then it not be written else if one is true then it will be write on child node too,,,,,

//===================================
//        All Global Functions
//===================================

function isAuthenticatedUser(userid) {
  return auth != null && auth.uid == userid;
}

function isAuthenticated() {
    return auth != null;
}

//  Root path
//===================================
 path / {                // plaese donot change the value it should false
  read()  {false}
  write() {false}
}

//===================================
// User Started Here
//===================================
//  User path
//===================================

path /users {
  /{userid} is UserType {
   update() { isAuthenticatedUser(userid)}
   read()   { isAuthenticated() }
  }
}
/*type UseridLength extends String {
    validate() { this.length >= 3  && this.length <= 10 }
}*/
/*
type UseridLengthEqualtoTen extends String {
  validate() { this.length == 10 }
}*/
//===================================
//  User Type
//===================================

type UserType {
 "email"         : String,
 "firstName"     : NameLengthGreaterThanThree,
 "lastName"      : NameLengthGreaterThanThree,
 "date-created"  : CurrentTimeStamp,
 "status"        : StatusType,                            //plaese donot change this in your code it will change only from zero to one when email is varified
 'profile-image' : String | Null,
 'contactNumber' : ContactNumberLength | Null,
 'profession'    : String | Null,
 'desc'          : DescLenght | Null
}

type NameLengthGreaterThanThree extends String{
     validate() { this.length >= 3 }
}

type CurrentTimeStamp extends Number{
  validate() { this <= now }
}

type StatusType extends Number {
  validate() { this == 0 || this == 1 }        // 0 = unverified || 1 = verified
}

//===================================
// user-presence Started Here
//===================================

path /users-presence/{userid} is UserPresence {
   read()     {     isAuthenticated()      }
   create()   {  isAuthenticatedUser(userid)  }
   update()   {  isAuthenticatedUser(userid)  }

   //---------------------------------------
   //   path for connections/ConnectionID
   //-------------------------------------

   /connections/{connectionID} is ConnectionIDStatus { }
}

type UserPresence {
      "last-modified"   :  CurrentTimeStamp | Null,            // when ever there is a state change it should be updated
      "defined-status"  :  Number   | Null                     // 1 = availableWhenConnected, 2 = away, 3 = busy. if no connection that means it's offline
}

type ConnectionIDStatus{
      delete()   {  isAuthenticatedUser(userid) }
      "type"     :  Number,                               //  1 = mobile, 2 = tablet, 3 = web, 4 = iWatch , 5 = hololens
      "started"  : CurrentTimeStamp
}

type ContactNumberLength extends String {
  validate() {
    this.length >= 5
  }
}

type DescLenght extends String {
  validate() {
     this.length == 0 || this.length >= 4 && this.length <= 100 }
}


//===================================
// user-group-memberships Start Here
//===================================

path /user-group-memberships/{userid} {
   read()     {      isAuthenticatedUser(userid)    }
   validate() {    doesUserExist(userid) }
}

function doesUserExist(userid) {
    return prior(root['users'][userid]).val() != null
}

path /user-group-memberships/{userid}/{groupid} is UserGroupSubGroupMemberShipType {

 //read() { isGroupIdExist(groupid) && isCurrentUserGroupOwner(groupid) || isCurrentUserGroupAdmin(groupid) }

 create() {      isAuthenticated()  &&  this['membership-type'].val() == 1 ||
                  isCurrentUserGroupOwner(groupid)        ||    // &&        this['membership-type'].val() > 0
                  isCurrentUserGroupAdmin(groupid)          // &&        this['membership-type'].val() > 0
                  }
 update() {
                 isGroupIdExist(groupid)                    &&
                 isCurrentUserGroupOwner(groupid)           ||
                 isCurrentUserGroupAdmin(groupid)       //  ||
                // userGroupMembershipAnyType(groupid)           //discussion
                  }
  delete() {
                 isCurrentUserGroupOwner(groupid)           ||
                 isGroupIdExist(groupid)                    &&
                 isCurrentUserGroupAdmin(groupid)       //  ||
                // userGroupMembershipAnyType(groupid)           //discussion
                  }
 }


 type UserGroupSubGroupMemberShipType {
   "membership-type" : MembershipValue,
   "timestamp"       : CurrentTimeStamp
 }

 type MembershipValue extends Number {
    validate() {                                                                               //1 owner ; 2 admin 3 member -1 blocked member 0 for ????
    this.val() == -1 ||
    this.val() == 0  ||
    this.val() == 1  ||
    this.val() == 2  ||
    this.val() == 3

    }       // || this.val() == 4

  }

function userGroupMembershipAnyType(groupid) {
    return prior(root['user-group-memberships'][auth.uid][groupid]['membership-type'].val() > 0)
 }

 function isGroupIdExist(groupid) {
    return prior(root['user-group-memberships'][auth.uid][groupid].val() != null)
 }




function isAdminHimSelf (value) {
    return   value.val() == 1
}


function authAdminForWriteOnce(that) {
    return   isAdminHimSelf(that['membership-type'])              // && authForWriteOnce(that)
}


function authOwnerAdminEdit(that) {
    return  prior(root['user-group-memberships'])
}


function isCurrentUserGroupOwner (groupid) {
    return  prior(root['user-group-memberships'][auth.uid][groupid]['membership-type'].val() == 1)
 }


 function isCurrentUserGroupAdmin (groupid) {
    return  prior(root['user-group-memberships'][auth.uid][groupid]['membership-type'].val() == 2)
 }




//===================================
// User-Group-Membership End
//===================================


//Group-member Start Here
//===================================
// Path for Group-member
//===================================

path /group-members/{groupid} {
  read() {    isCurrentUserGroupOwner(groupid)           ||
              isCurrentUserGroupAdmin(groupid) ||
              userGroupMembershipAnyType(groupid) } // i think blockmember type is -1 so blockmembers cannot read the group for that we want member-shiptype should be greater than 0
  create() {  isAuthenticated()                          &&
              isCurrentUserGroupOwner(groupid)           ||
              isCurrentUserGroupAdmin(groupid)
  }
  update() {  isAuthenticated()                          &&
              isCurrentUserGroupOwner(groupid)           ||
              isCurrentUserGroupAdmin(groupid)
  }
}

path /group-members/{groupid}/{userid} is UserGroupSubGroupMemberShipType {
  read()   {  isAuthenticatedUser(userid) }

  create() {   isAuthenticatedUser(userid)              &&  this['membership-type'].val() == 1 ||
              isCurrentUserGroupOwner(groupid)           &&        this['membership-type'].val() >= 2     ||
              isCurrentUserGroupAdmin(groupid)           &&        this['membership-type'].val() >= 2

 }

  update() {  isGroupIdExist(groupid)                   ||
              isCurrentUserGroupOwner(groupid)          ||
              isCurrentUserGroupAdmin(groupid)               }

 delete() {   isGroupIdExist(groupid)                   ||
              isCurrentUserGroupOwner(groupid)          ||
              isCurrentUserGroupAdmin(groupid)               }
 }



//===================================
//function For Group-member
//===================================

function isGroupMembersIdExist(groupid) {
  return prior(root['group-members'][groupid][auth.uid].val() != null);
}

function groupMemberShipAnyType(groupid) {
    return prior(root['group-members'][groupid][auth.uid]['membership-type'].val() > 0)
 }

function isCurrentUserGroupMembersOwner(groupid) {
    return  prior(root['group-members'][groupid][auth.uid]['membership-type'].val() == 1 )
 }


 function isCurrentUserGroupMembersAdmin(groupid) {
    return  prior(root['group-members'][groupid][auth.uid]['membership-type'].val() == 2 )
 }

/*
 function groupMemberTypeShoudBe($groupid) {
    return prior(root['group-members'][$groupid][auth.uid].val() != null     &&
     root['group-members'][$groupid][auth.uid]['membership-type'].val() == 1 ||
     root['group-members'][$groupid][auth.uid]['membership-type'].val() ==2 )
 }*/

//===================================
//Group-member End Here
//===================================



//===================================
// Group Start Here
//===================================
//        path for  Groups
//===================================


 path /groups/{groupid} is GroupInfo {
  read()  {   isGroupIdExist(groupid)          &&
              userGroupMembershipAnyType(groupid)
  }

  create() {  isAuthenticated() }

  update() { isGroupMembersIdExist(groupid) && isCurrentUserGroupMembersOwner(groupid) || isCurrentUserGroupMembersAdmin(groupid) }

  /members-checked-in is MembersCheckInInfo {
   update() { isGroupMembersIdExist(groupid) }
  }

  //privacy is PrivacyType { }

}

function isUserUSerIDExist() {
  return prior(root['users'][auth.uid] != null)
 }

type GroupInfo {
 'title'            :  TitleLength,
 'desc'             :  DescLenght         | Null,
 'timestamp'        :  CurrentTimeStamp  ,
 'members-count'    :  MemberCountGreaterThanEqualToOne ,
 'subgroups-count'  :  SubgroupCountGreaterThanEqualToZero,
 'address-title'    :  AddressTitleLength   | Null,
 'phone'            :  PhoneNumLength  | Null ,
 'timeZone'         :  TimeZoneLength,
 'logo-image'       :  LogoImageRequirement | Null,
  'address'         :  AddressLength        | Null,
  "group-owner-id"  :  String,
  "owner-img-url"   :  String | Null,
  "privacy"         : InvitationPrivacy
  }


type TitleLength extends String {
 validate() { this.length >= 3 && this.length <= 40  }

 }


type AddressTitleLength extends String {
 validate() {this.length == 0  || this.length >= 3 && this.length <= 40  }

 }

type AddressLength extends String {
 validate() {this.length == 0 ||  this.length >= 4 && this.length <= 200 }
}

type PhoneNumLength extends String {
   validate() {this.length == 0 || this.length >= 11 && this.length <= 100  }
}



 type MemberCountGreaterThanEqualToOne extends Number {
   validate() {   this >= 1  }
  }

type SubgroupCountGreaterThanEqualToZero extends Number {
   validate() {    this >= 0   }
}

 type TimeZoneLength extends String {
   validate() { this.length >= 3 && this.length <= 100   }
  }

type MembersCheckInInfo {
 // validate() { this.hasChildren(['checked-in']) }
   count : Count
}

type Count extends Number {
  validate() { this >= 0 }
  write()    { isGroupMembersIdExist(groupid) && groupMemberShipAnyType(groupid) }
}
/*
type PrivacyType {
  invitationType : InvitationPrivacyType

}
*/
 type InvitationPrivacy extends Number {
  validate() { this == 1 || this == 2 || this == 3}
 }
type LogoImageRequirement {
   validate() {
    this.hasChildren(['url','id','bucket-name','source','mediaType']);
   }
}



 //===================================
 //       Group Names
 //===================================

 path /groups-names {
    read() { isAuthenticated() }


    //Path for /groups-names/groupid
    //---------------------------

      /{groupid} is GroupsNameInfo {

          create() { isAuthenticated()  }

          update() { isGroupMembersIdExist(groupid)            &&
                     isCurrentUserGroupMembersOwner(groupid)   ||
                     isCurrentUserGroupMembersAdmin(groupid)
          }
      }
 }

 type GroupsNameInfo {
          groupImgUrl  : String | Null,
          ownerImgUrl  : String | Null,
          title        : String,
          'address-title' : String | Null
 }



 //   Group Activity Streams
 //====================================
 //Please note when creating group using Multi path update donot add group creation activity seprately
path /group-activity-streams/{groupid} {
  index()  {  "published" }

  read()     {    isGroupMembersIdExist(groupid)       &&
                  groupMemberShipAnyType(groupid) }

  write()    {   (isAuthenticated() &&  isGroupMembersIdExist(groupid)  &&  groupMemberShipAnyType(groupid)) || isAuthenticated() && isGroupJoined(this['verb']) }

  // validate() { prior(root['groups'][$groupid].val() != null)     }

/{activityid} is GroupActivityStreamsInfo {
    index()  {  "published" }
write() {
  (isAuthenticated() && isGroupJoined(this['verb']))
}
 }
 }
 function isGroupJoined(verb) {
   return verb == "group-join" ? true : false;
 }
 function isSubGroupJoined(verb) {
   return verb == "subgroup-join" ? true : false;
 }
 //Type of Group Activity Streams
 type GroupActivityStreamsInfo {
   displayName : String,
   language : String,
   published: CurrentTimeStamp,
   verb : String,
   actor: Actor,
   object: ObjectType | Null,
   target: TargetInfo | Null
}

type  Actor {
   displayName: String,
   email: String,
   "profile-image" : String,
   id: String,
   type :String
 }
 type ObjectType {
   displayName: String,
   id: String,
   type :String,
   url: String | Null,
   email: String | Null,
 }
 type TargetInfo {
   displayName: String,
   id: String,
   type :String,
   url: String
 }
 //   SubGroup Activity Streams
 //====================================
 //Please note when creating group using Multi path update donot add group creation activity seprately
path /subgroup-activity-streams/{groupid} {
  read() {
      isAuthenticated()                &&
      isGroupMembersIdExist(groupid)          &&
      isCurrentUserGroupMembersOwner(groupid) ||
      groupMemberShipAnyType(groupid)  }

  /{subgroupid} {
    index()  {  "published" }

    read()     {    isSubGroupMembersSubGroupIdAuthIDExist(groupid ,subgroupid)     &&
                    isSubGroupMembersSubGroupIdAuthIDMemberShipTypeExist(groupid,subgroupid)  }

    write()    {   (isAuthenticated()                        &&
                    isSubGroupMembersSubGroupIdAuthIDExist(groupid ,subgroupid) ||
                    isCurrentSubUserGroupMembersOwner(groupid,subgroupid)      ||
                    isCurrentSubUserGroupMembersAdmin(groupid,subgroupid)  ) }

    // validate() { prior(root['groups'][$groupid].val() != null)     }

      /{activityid} is GroupActivityStreamsInfo {
                index()  {  "published" }
                write() {  ( isAuthenticated() && isSubGroupJoined(this['verb'])) }
        }
    }
}

 //====================================
 //   Group Check In Current
 //====================================

 path /group-check-in-current/{groupid} {
    read()  { isGroupMembersIdExist(groupid) &&
              groupMemberShipAnyType(groupid) }

    write() { isAuthenticated()       &&
              isGroupMembersIdExist(groupid) &&
              groupMemberShipAnyType(groupid) }

     //Path for /Group Check In Current/{groupid}
    //-----------------------------------------------
    /{userid} {
      write() {
              isAuthenticatedUser(userid) &&
              isGroupMembersIdExist(groupid)      &&
              groupMemberShipAnyType(groupid)
      }
    }

 }


 //====================================
 //   Group Check In Record
 //====================================

path /group-check-in-records/{groupid} {
    read()  { isGroupMembersIdExist(groupid) &&
              groupMemberShipAnyType(groupid) }

    write() { isAuthenticated()       &&
              isGroupMembersIdExist(groupid) &&
              groupMemberShipAnyType(groupid) }


     //Path for /Group Check In Record/{groupid}
    //-----------------------------------------------
    /{userid} {
      write() {
              isAuthenticatedUser(userid) &&
              isGroupMembersIdExist(groupid)      &&
              groupMemberShipAnyType(groupid)
      }
    }
}



 //====================================
 //   Group membership-requests
 //====================================

path /group-membership-requests/{groupid} {
       read() {   isAuthenticated()
            }
        create() { isAuthenticated() }
        update() {   isGroupMembersIdExist(groupid)            &&
                    isCurrentUserGroupMembersOwner(groupid)   ||
                    isCurrentUserGroupMembersAdmin(groupid)
        }
        delete() {  isGroupMembersIdExist(groupid)            &&
                   isCurrentUserGroupMembersOwner(groupid)   ||
                   isCurrentUserGroupMembersAdmin(groupid)
        }

     //Path for /group-membership-requests/{groupid}/{userid}
    //-----------------------------------------------

    /{userid} {
      read()  { isAuthenticatedUser(userid) }
      write() {  isAuthenticated()  }
   }

}
 //====================================
 //   Group membership-requests by-user
 //====================================

path /group-membership-requests-by-user/{userid} {
      read() { isAuthenticatedUser(userid) }
      write() { isAuthenticatedUser(userid) }

    //Path for group-membership-requests-by-user/{userid}/{groupid}
    //-----------------------------------------------------------

    path /{groupid} {
         read() {  isGroupMembersIdExist(groupid)            &&
                   isCurrentUserGroupMembersOwner(groupid)   ||
                   isCurrentUserGroupMembersAdmin(groupid)  }

        write() {  isGroupMembersIdExist(groupid)            &&
                   isCurrentUserGroupMembersOwner(groupid)   ||
                   isCurrentUserGroupMembersAdmin(groupid)   }
    }
}


 //======================================
 //         Sub Groups (teams)
 //======================================

//================================
//   subgroup
//================================

 path /subgroups/{groupid} {

   read() { isGroupMembersIdExist(groupid)            &&
            /*isCurrentUserGroupMembersOwner(groupid)   ||
            isCurrentUserGroupMembersAdmin(groupid)  ||*/
            groupMemberShipAnyType(groupid) }

   write() {
            isGroupMembersIdExist(groupid)            &&
            isCurrentUserGroupMembersOwner(groupid)   ||
            isCurrentUserGroupMembersAdmin(groupid)  }                                               //  groupMemberShipAnyType(groupid)

       //Path for /subgroup/{groupid}/{subgroupid}
      //--------------------------------------------------

     /{subgroupid} is SubGroupInfo {
    validate() { this.hasChildren(['members-checked-in'])   }

   read() {  isSubGroupMembersSubGroupIdAuthIDMemberShipTypeExist(groupid,subgroupid)         &&
             subGroupMembersMemberShipAnyType(groupid,subgroupid)  }


   create() {  isSubGroupMembersSubGroupIdAuthIDExist(groupid ,subgroupid)  &&
               isCurrentSubUserGroupMembersOwner(groupid,subgroupid)       ||
               isCurrentSubUserGroupMembersAdmin(groupid,subgroupid)   }
   update() {  isSubGroupMembersSubGroupIdAuthIDExist(groupid ,subgroupid)  &&
               isCurrentSubUserGroupMembersOwner(groupid,subgroupid)       ||
               isCurrentSubUserGroupMembersAdmin(groupid,subgroupid)   }
       //Path for /subgroup/{groupid}/{subgroupid}/policyID
      //-------------------------------------------------------
    // /policyID is String{  }

    // path for /subgroups/{groupid}/{subgroupid}/members-checked-in
   //---------------------------------------------------------
  // checked-in/{userid} { }
  /*update()    { isAuthenticatedUser($userid) &&
               isSubGroupMembersSubGroupIdAuthIDMemberShipTypeExist(groupid,subgroupid) &&
               subGroupMembersMemberShipAnyType(groupid,subgroupid)    }*/
    /members-checked-in is SubGroupMembersCheckInInfo {
     validate() { isUserUSerIDExist() }

      update()    { isSubGroupMembersSubGroupIdAuthIDMemberShipTypeExist(groupid,subgroupid) }
     }
   }
 }
 //------------------------------------
 // TypeFor SubGroup
 //-------------------------------------

 type SubGroupInfo {
 'title'                     :  TitleLength,
 'desc'                      :  DescLenght  | Null,
 'timestamp'                 :  CurrentTimeStamp ,
 'members-count'             :  MemberCountGreaterThanEqualToZero,
 'microgroups-count'         :  SubgroupCountGreaterThanEqualToZero ,
 'logo-image'                :  LogoImageRequirement | Null,
 'policyID'                  :  String | Null,
 "subgroup-owner-id"         :  String | Null,
 "owner-img-url"             :  String | Null
}


type SubGroupMembersCheckInInfo {
  // validate() { this.hasChildren(['checked-in']) }
   count      : SubGroupCount
}
type SubGroupCount extends Number {
 validate() {  this >= 0  }
 write()    {  isSubGroupMembersSubGroupIdAuthIDMemberShipTypeExist(groupid,subgroupid) &&
               subGroupMembersMemberShipAnyType(groupid,subgroupid)
 }
}
type MemberCountGreaterThanEqualToZero extends Number{
   validate() {  this >=0  }
}

//---------------------------------------------------
//         Function For SubGroup
//----------------------------------------------------

function  isSubGroupMembersSubGroupIdAuthIDMemberShipTypeExist(groupid,subgroupid) {
  return prior(root['subgroup-members'][groupid][subgroupid][auth.uid]['membership-type'].val() != null)
}

function isSubGroupMembersSubGroupIdAuthIDExist(groupid ,subgroupid) {
 return prior(root['subgroup-members'][groupid][subgroupid][auth.uid].val() != null )
}



function subGroupMembersMemberShipAnyType(groupid,subgroupid) {
  return prior(root['subgroup-members'][groupid][subgroupid][auth.uid]['membership-type'].val() > 0)
}


function isCurrentSubUserGroupMembersOwner(groupid,subgroupid) {
 return prior(root['subgroup-members'][groupid][subgroupid][auth.uid]['membership-type'].val() == 1)
}

function isCurrentSubUserGroupMembersAdmin(groupid,subgroupid) {
 return prior(root['subgroup-members'][groupid][subgroupid][auth.uid]['membership-type'].val() == 2)
}



//================================
//subgroup names
//================================

path /subgroups-names/{groupid}/{subgroupid} is SubGroupsNameInfo {
    /*read()  {   isGroupMembersIdExist(groupid) &&*/
    read()  { isAuthenticated() }
                /*groupMemberShipAnyType(groupid) }*/

    create() {  isGroupMembersIdExist(groupid)              &&
                isCurrentUserGroupMembersOwner(groupid)      ||
                isCurrentUserGroupMembersAdmin(groupid)
             }
               /*groupMemberShipAnyType(groupid)  }*/
    update() {
                    isGroupMembersIdExist(groupid)                              &&
                    isCurrentUserGroupMembersOwner(groupid)                     ||
                    isCurrentUserGroupMembersAdmin(groupid)                     ||
                    isCurrentSubUserGroupMembersOwner(groupid, subgroupid)      ||
                    isCurrentSubUserGroupMembersAdmin(groupid, subgroupid)
            }

    // path for /subgroups-names/{groupid}/{subgroupid}
   //------------------------------------

        /*/{subgroupid} is SubGroupsNameInfo {*/
        /*read() { isSubGroupMembersSubGroupIdAuthIDMemberShipTypeExist(groupid,subgroupid) &&*/
                   /*subGroupMembersMemberShipAnyType(groupid,subgroupid)*/
        /*}*/
   /*}*/

}

type SubGroupsNameInfo {
     subgroupImgUrl  : String | Null,
     ownerImgUrl  : String | Null,
     title        : String
}

//================================
//subgroup Members
//================================

path /subgroup-members/{groupid}/{subgroupid} {
  //
  read() {   isSubGroupMembersSubGroupIdAuthIDExist(groupid ,subgroupid) && subGroupMembersMemberShipAnyType(groupid,subgroupid) }
   create() { isGroupMembersIdExist(groupid)              &&
              isCurrentUserGroupMembersOwner(groupid)      ||
              isCurrentUserGroupMembersAdmin(groupid) ||
              isCurrentSubUserGroupMembersOwner(groupid,subgroupid) ||
              isCurrentSubUserGroupMembersAdmin(groupid,subgroupid)
            }
    // path for /subgroup-members/{groupid}/{userid}
   //------------------------------------------------
   /{userid} is UserGroupSubGroupMemberShipType {
     read(){ subGroupMembersMemberShipAnyType(groupid,subgroupid) || isCurrentSubUserGroupMembersOwner(groupid, subgroupid) || isCurrentSubUserGroupMembersAdmin(groupid, subgroupid)  }
     create() {  isGroupMembersIdExist(groupid)              &&
                 isCurrentUserGroupMembersOwner(groupid)      ||
                 isCurrentUserGroupMembersAdmin(groupid)      ||
                 isCurrentSubUserGroupMembersOwner(groupid,subgroupid) ||
              isCurrentSubUserGroupMembersAdmin(groupid,subgroupid)
            }
     update(){ isCurrentSubUserGroupMembersOwner(groupid, subgroupid) || isCurrentSubUserGroupMembersAdmin(groupid, subgroupid)}
     delete(){ isCurrentSubUserGroupMembersOwner(groupid, subgroupid) || isCurrentSubUserGroupMembersAdmin(groupid, subgroupid)}

     }
   }


//==================================
//      subgroup-activity-streams
//==================================


/*path  /subgroup-activity-streams/{groupid} {

    read() {
        isAuthenticated()                &&
        isGroupMembersIdExist(groupid)          &&
        isCurrentUserGroupMembersOwner(groupid) ||
        groupMemberShipAnyType(groupid)  }

    write() {
        isAuthenticated()                 &&
        isGroupMembersIdExist(groupid)           &&
        isCurrentUserGroupMembersOwner(groupid)  ||
        isCurrentUserGroupMembersAdmin(groupid)  }    //======================== groupMemberShipAnyType()  //--------------- grater than 2 in new.bolt




     // path for /subgroup-activity-streams/{groupid}/{subgroupid}
    //-------------------------------------------------------------

    /{subgroupid} {
      write() {
               isAuthenticated()                        &&
               isSubGroupMembersSubGroupIdAuthIDExist(groupid ,subgroupid) &&
               isCurrentSubUserGroupMembersOwner(groupid,subgroupid)      ||
               isCurrentSubUserGroupMembersAdmin(groupid,subgroupid)   }

    // path for /subgroup-activity-streams/{groupid}/{activityid}
   //-------------------------------------------------------------
     /{activityid} is SubGroupActivity {
        write() { isAuthenticated()                        &&
                  isSubGroupMembersSubGroupIdAuthIDExist(groupid ,subgroupid) &&
                  subGroupMembersMemberShipAnyType(groupid,subgroupid)    }
      }
   }
 }

 type SubGroupActivity {
        validate() {
            this['actor']['id'].val() === auth.uid &&
            this.hasChildren(['actor', 'displayName', 'language', 'published', 'target', 'verb','profile-image'])  }
  }*/




//==================================
//      subgroup-check-in-current
//==================================

/*subgroup-check-in-current*/
path /subgroup-check-in-current/{groupid} {
    read() {
            isAuthenticated()       &&
            isGroupMembersIdExist(groupid) &&
            groupMemberShipAnyType(groupid)  }
    write() {
            isAuthenticated()                &&
            isGroupMembersIdExist(groupid)          &&
            isCurrentUserGroupMembersOwner(groupid) ||
            groupMemberShipAnyType(groupid)  }


   // path for /subgroup-check-in-current/{groupid}/{subgroupid}
   //-------------------------------------------------------------

  /{subgroupid} {
      write() {
               isAuthenticated() &&
               isSubGroupMembersSubGroupIdAuthIDExist(groupid ,subgroupid) &&
               isCurrentSubUserGroupMembersOwner(groupid,subgroupid)      ||
               isCurrentSubUserGroupMembersAdmin(groupid,subgroupid)   }

   // path for /subgroup-check-in-current/{groupid}/{subgroupid}/{userid}
   //-------------------------------------------------------------


     /{userid} {
        write() {
                  isAuthenticated()                        &&
                  isAuthenticatedUser(userid)             &&
                  isSubGroupMembersSubGroupIdAuthIDExist(groupid ,subgroupid) &&
                  subGroupMembersMemberShipAnyType(groupid,subgroupid)  }

        validate() {
           this.hasChildren(['identified-location-id', 'location', 'message', 'record-ref', 'source-device-type', 'source-type', 'subgroup-url', 'timestamp', 'type'])   }
     }
   }
 }


//==================================
//      subgroup-check-in-current-by-user
//==================================
/*subgroup-check-in-current-by-user*/
path /subgroup-check-in-current-by-user/{userid} {
    read() {
          isAuthenticatedUser(userid) ||
          ifUserUserIDExist(userid) }

    write() {
          isAuthenticated() &&
          isSubGroupGroupIDExist(this) ||
          isSubGroupGroupIDOwner(this) ||
          isSubGroupGroupIDAdmin(this) ||   isAuthenticatedUser(userid)  } // greater than 0 old rules

}
function ifUserUserIDExist(userid) {
         return prior(root['users'][userid].val() != null)
 }

function isSubGroupGroupIDExist(this) {
        return   prior(root['group-members'])[this['groupID']][auth.uid].val() != null

}

function isSubGroupGroupIDOwner(this) {
  return   prior(root['group-members'])[this['groupID']][auth.uid]['membership-type'].val() == 1

}

function isSubGroupGroupIDAdmin(this) {
  return   prior(root['group-members'])[this['groupID']][auth.uid]['membership-type'].val() == 2

}



//==================================
//     subgroup-check-in-records
//==================================
/*subgroup-check-in-records*/
path /subgroup-check-in-records/{groupid} {
    read() {
            isAuthenticated()                &&
            isGroupMembersIdExist(groupid)          &&
            isCurrentUserGroupMembersOwner(groupid) ||
            groupMemberShipAnyType(groupid)  }

    write() {
            isAuthenticated()                &&
            isGroupMembersIdExist(groupid)          ||
            isCurrentUserGroupMembersOwner(groupid) ||
            isCurrentUserGroupMembersAdmin(groupid) }


   // path for /subgroup-check-in-records/{groupid}/{subgroupid}
   //-------------------------------------------------------------

    /{subgroupid} {
            read() {
               isAuthenticated()                        &&
               isSubGroupMembersSubGroupIdAuthIDExist(groupid,subgroupid) ||
               isCurrentSubUserGroupMembersOwner(groupid,subgroupid)      ||
               isCurrentSubUserGroupMembersAdmin(groupid,subgroupid)  }

             write() {
               isAuthenticated()                        &&
               isSubGroupMembersSubGroupIdAuthIDExist(groupid,subgroupid) ||
               isCurrentSubUserGroupMembersOwner(groupid,subgroupid)      ||
               isCurrentSubUserGroupMembersAdmin(groupid,subgroupid) }

     // path for /subgroup-check-in-records/{groupid}/{subgroupid}/{userid}
    //-------------------------------------------------------------
   /{userid} {
      write() {
                isAuthenticated()                             &&
                isAuthenticatedUser(userid)                  &&
                isSubGroupMembersSubGroupIdAuthIDExist(groupid ,subgroupid)      ||
                subGroupMembersMemberShipAnyType(groupid,subgroupid)  }

      }
   }
}
//==================================
//     user-subgroup-memberships
//==================================
/*user-subgroup-memberships*/
path /user-subgroup-memberships/{userid} {
    read() {
                isAuthenticatedUser(userid) || (isAuthenticated() && ifUserUserIDExist(userid))   }

      validate() {  ifUserUserIDExist(userid) }

   // path for  /user-subgroup-memberships/{userid}/{groupid}
   //-------------------------------------------------------------

    /{groupid} {
        /*read() {
               isGroupIdExist(groupid)                    &&
               isCurrentUserGroupOwner(groupid)           ||
               isCurrentUserGroupAdmin(groupid)    }
        write() {
               isGroupIdExist(groupid)                    &&
               isCurrentUserGroupOwner(groupid)           ||
               isCurrentUserGroupAdmin(groupid)    }*/

    // path for  /user-subgroup-memberships/{userid}/{groupid}/{subgroupid}
   //-------------------------------------------------------------

      /{subgroupid} is UserGroupSubGroupMemberShipType {
        read() {
                isUserSubGroupMemberShipExist(groupid, subgroupid)        &&
                isUserCurrentSubgroupMemberShipOwner(groupid, subgroupid) ||
                isUserCurrentSubgroupMemberShipAdmin(groupid, subgroupid)  }

        create() {  isAuthenticated()  &&  this['membership-type'].val() == 1 ||
                  isUserSubGroupMemberShipExist(groupid,subgroupid) ||
                isUserCurrentSubgroupMemberShipOwner(groupid, subgroupid) ||
                isUserCurrentSubgroupMemberShipAdmin(groupid, subgroupid)  }
        update() {
                isAuthenticated()  &&
                isUserCurrentSubgroupMemberShipOwner(groupid, subgroupid) ||
                isUserCurrentSubgroupMemberShipAdmin(groupid, subgroupid)
        }
        delete() {
                isAuthenticated()  &&
                isUserCurrentSubgroupMemberShipOwner(groupid, subgroupid) ||
                isUserCurrentSubgroupMemberShipAdmin(groupid, subgroupid)
        }
              /*isUserSubGroupMemberShipExist(groupid,subgroupid)     }   */
              /*isUserCurrentSubgroupMemberShipOwner(groupid, subgroupid) ||
              isUserCurrentSubgroupMemberShipAdmin(groupid, subgroupid)   }*/
      }
   }
}




function isUserCurrentSubgroupMemberShipOwner(groupid,subgroupId) {
      return prior(root['user-subgroup-memberships'][auth.uid][groupid][subgroupId]['membership-type'].val() == 1)

}


function isUserSubGroupMemberShipExist(groupid,subgroupId) {
      return prior(root['user-subgroup-memberships'][auth.uid][groupid][subgroupId].val() != null)

}

function isUserCurrentSubgroupMemberShipAdmin(groupid,subgroupId) {
      return prior(root['user-subgroup-memberships'][auth.uid][groupid][subgroupId]['membership-type'].val() == 2)

}



//==================================
//     user-subgroup-memberships
//==================================
/*user-subgroup-memberships*/
path /subgroup-membership-requests/{groupid} {

  read()  {    isGroupIdExist(groupid)                    &&
               isCurrentUserGroupOwner(groupid)           ||
               isCurrentUserGroupAdmin(groupid)    }

  write() {    isGroupIdExist(groupid)                    &&
               isCurrentUserGroupOwner(groupid)           ||
               isCurrentUserGroupAdmin(groupid)  }

    // path for  /subgroup-membership-requests/{groupid}/{subgroupid}
   //-------------------------------------------------------------
    /{subgroupid} {
        read()  { userGroupMembershipAnyType(groupid) }
        write() { userGroupMembershipAnyType(groupid) }

   // path for  /subgroup-membership-requests/{groupid}/{subgroupid}/{userid}
   //----------------------------------------------------------------------
     /{userid} is SubGroupMembershipRequest{
        read()  { isAuthenticatedUser(userid) }
        write() { isAuthenticatedUser(userid) }

     }
   }
}

type SubGroupMembershipRequest {
   validate()   { ifUserUserIDExist(userid) }
   'message'    : MessageLength,
   'timestamp'  :  CurrentTimeStamp
}
 type MessageLength extends String {
   validate() {
     this.length >= 10 && this.length <= 40 }
 }



 //==================================
//     Subgroup Membership Requests By User
//==================================
/*Subgroup Membership Requests By User*/
 path /subgroup-membership-requests-by-user/{userid} {

  read()     { isAuthenticatedUser(userid) }
  validate() {    ifUserUserIDExist(userid)  }

    // path for   /subgroup-membership-requests-by-user/{userid}/{groupid}
   //----------------------------------------------------------------------

   /{groupid} {
       read() {    isGroupIdExist(groupid)        &&
                   userGroupMembershipAnyType(groupid) }
       write() {   isGroupIdExist(groupid)        &&
                   userGroupMembershipAnyType(groupid) }

    // path for   /subgroup-membership-requests-by-user/{userid}/{groupid}
   //----------------------------------------------------------------------

     /{subgroupid} is SubGroupRequestByUserTimeStamp {
      read() {    isGroupIdExist(groupid)        &&
                  userGroupMembershipAnyType(groupid) }
     }
   }
 }
 //==========================================
 // Type For SubGroupRequestByUserTimeStamp
 //==========================================
type SubGroupRequestByUserTimeStamp {
  'timestamp'      : CurrentTimeStamp
}

 //==========================================
 // Path For Group Private Chats
 //==========================================
/*Group Private Chats*/
path /group-private-chats/{groupid}/{chatid} {
    read() { isAuthenticated() && isChatIdExist(groupid,chatid)  }

   // path for   /group-private-chats/{groupid}/{chatid}/{automessageid}
   //----------------------------------------------------------------------
  /{automessageid} {
   create() { isAuthenticated() && isChatIdExist(groupid,chatid) }
  }
}

function isChatIdExist(groupid,chatid) {
 return prior(root['user-private-chat-refs'][auth.uid][groupid][chatid].val() != null )
}


//==========================================
 // Path For User Private Chat Refs
 //==========================================
/*User Private Chat Refs*/
 path /user-private-chat-refs/{userid}/{groupid} {
  read()  { isAuthenticatedUser(userid) }

  write() { isAuthenticatedUser(userid) &&
            isGroupIdExist(groupid)       &&
            userGroupMembershipAnyType(groupid)   }
 }

//==========================================
 // Path For Group Chats
 //==========================================
 /*Group Chats*/

path /group-chats/{groupid} {
  read() {   isAuthenticated()       &&
             isGroupMembersIdExist(groupid) &&
             groupMemberShipAnyType(groupid)  }

  write() {  isAuthenticated()       &&
             isGroupMembersIdExist(groupid) &&
             groupMemberShipAnyType(groupid)  }

 validate() { isGroupGroupIDExist(groupid) }


   // path for  /group-chats/{groupid}/chattopicid
   //----------------------------------------------------------------------

   /{chattopicid} is ChatInfo {

   // path for  /group-chats/{groupid}/chattopicid/messages/{messageid}
   //----------------------------------------------------------------------

   /messages/{messageid} {
    validate() { this.hasChildren(['from', 'timestamp', 'text'])}
    }
  }
}

function isGroupGroupIDExist(groupid) {
  return prior(root['groups'][groupid] != null)
 }

type ChatInfo {
 'title'      : ChatTitleLength,
 'timestamp'  : CurrentTimeStamp,
 'created-by' : CreatedBy
}

type CreatedBy {
 validate() { ((prior(root['users'])[this] != null) && (auth.uid == this)) }
}
 type ChatTitleLength extends Number {
     validate() { this.length >= 3 && this.length <= 100 }
 }
 //==========================================
 // Path For SubGroup Chats
 //==========================================
 /*SubGroup Chats*/

path /subgroup-chats/{groupid} {
   read() {
               isGroupMembersIdExist(groupid)  &&
               isCurrentUserGroupMembersOwner(groupid)||
               isCurrentUserGroupMembersAdmin(groupid)  }

    // path for  /subgroup-chats/{groupid}/{subgroupid}
   //----------------------------------------------------------------------

  /{subgroupid} {
    read() {   isAuthenticated()                         &&
               isSubGroupMembersSubGroupIdAuthIDExist(groupid,subgroupid)  &&
               subGroupMembersMemberShipAnyType(groupid,subgroupid) }

    write() {  isAuthenticated()                         &&
               isSubGroupMembersSubGroupIdAuthIDExist(groupid,subgroupid)  &&
               subGroupMembersMemberShipAnyType(groupid,subgroupid) }

    validate() { isSubGroupSubGroupIdExist(groupid , subgroupid)      }

      // path for  /subgroup-chats/{groupid}/{subgroupid}/chattopicid
     //----------------------------------------------------------------------

     /{chattopicid} is ChatInfo {

    // path for  /subgroup-chats/{groupid}/{subgroupid}/chattopicid/messages/{messageid}
   //----------------------------------------------------------------------

    /messages/{messageid} {
      validate() { this.hasChildren(['from', 'timestamp', 'text'])}

     }
    }
  }
}

function isSubGroupSubGroupIdExist(groupid , subgroupid) {
  return prior(root['subgroups'][groupid][subgroupid].val() != null )
}


//=========================================
//               Task
//=========================================
/*Task*/
path /tasks/{groupid} {
  read() {    isAuthenticated()       &&
              isGroupMembersIdExist(groupid) &&
              groupMemberShipAnyType(groupid) }
   write() {  isAuthenticated()       &&
              isGroupMembersIdExist(groupid) &&
              groupMemberShipAnyType(groupid) }
}


/*Policies*/
path /policies/{groupid}  {
  read()  {  isAuthenticated() && userGroupMembershipAnyType(groupid) }

 /{policyid} is PolicyType {
 read()  {  isAuthenticated() && userGroupMembershipAnyType(groupid) }

 write() {  isAuthenticated() &&
            isCurrentUserGroupOwner(groupid)    ||
            isCurrentUserGroupAdmin(groupid)      }

  /progressReportQuestions/{questionSetId} is QuesitonType { }

  }
}
type PolicyType {
   dailyReport : Boolean | Null,
  // dailyReportQuestions : [String] | Null,
   "defined-by" : String,
   location       : LocationType | String,
   locationBased  : Boolean | Null,
   policyID      : String,
   schedule   :  SchedulesType | String,
   timeBased : Boolean ,
   timestamp : CurrentTimeStamp,
   title    : String,
   "latestProgressReportQuestionID" : String | Null,
   progressReport   : Boolean

}

type QuesitonType {
    questions  : String[],
    timestamp  : CurrentTimeStamp
  }

type LocationType {
  lat : Number,
  lng : Number,
  radius : Number,
  title : String
}

type BooleanOrNull {
  validate() { this.isBoolean() || this == null }
}

 type SchedulesType {
   Sunday : BooleanOrNull[],
   Monday : BooleanOrNull[],
   Tuesday : BooleanOrNull[],
   Wednesday : BooleanOrNull[],
   Thursday : BooleanOrNull[],
   Friday : BooleanOrNull[],
   Saturday : BooleanOrNull[]
  }
/*Subgroup Policies*/
path /subgroup-policies/{groupid}{
  read(){ isAuthenticated() && userGroupMembershipAnyType(groupid) }
  /{subgroupid} is SubgroupAppliedPolicyType {
  read()  {  isAuthenticated() &&
             isCurrentUserGroupOwner(groupid)    ||
             isCurrentUserGroupAdmin(groupid)  ||
             isCurrentSubUserGroupMembersOwner(groupid,subgroupid) || isCurrentSubUserGroupMembersAdmin(groupid,subgroupid) ||
             subGroupMembersMemberShipAnyType(groupid,subgroupid)
          }

  create() {  isAuthenticated() && isCurrentSubUserGroupMembersOwner(groupid,subgroupid) || isCurrentSubUserGroupMembersAdmin(groupid,subgroupid) }
             /*isCurrentUserGroupOwner(groupid)    ||
             isCurrentUserGroupAdmin(groupid)     ||
             isSubGroupGroupIDOwner(this) ||*/
            //isSubGroupGroupIDAdmin(this)

  update() {  isAuthenticated() &&
              isCurrentUserGroupOwner(groupid)    ||
              isCurrentUserGroupAdmin(groupid)     ||
              isCurrentSubUserGroupMembersOwner(groupid,subgroupid) || isCurrentSubUserGroupMembersAdmin(groupid,subgroupid)
            }
 }
}
type AppliedPolicyType {
   hasPolicy   :  Boolean,
   policyID    :    String,
   title       : String

}
type SubgroupAppliedPolicyType {
   hasPolicy   :  Boolean,
   policyID    :    String,
  "policy-title" :  String,
   "subgroup-title"  : String | Null
}


/*User policies*/

  path /user-policies/{userid}/{groupid}/{subgroupid} is AppliedPolicyType {
    read()  {  isAuthenticatedUser(userid) ||
              isCurrentUserGroupOwner(groupid)    ||
               isCurrentUserGroupAdmin(groupid) ||
              isSubGroupGroupIDOwner(this) ||
              isSubGroupGroupIDAdmin(this)
          }

    write() {  isAuthenticated() &&
               isCurrentUserGroupOwner(groupid)    ||
               isCurrentUserGroupAdmin(groupid)    ||
               isSubGroupGroupIDOwner(this) ||
               isSubGroupGroupIDAdmin(this)  }
   }
/*progress Report By User*/
/*path /progress-reports-by-users/{userid} {

  read() { isAuthenticated() }

  /{groupid} {

    index()  {  "date" }
    /{subgroupid}{

      /{reportid} is ProgressType {
          read() {   isAuthenticated() &&
                     isCurrentUserGroupOwner(groupid)    ||
                     isCurrentUserGroupAdmin(groupid) ||
                     subGroupMembersMemberShipAnyType(groupid,subgroupid) }
          write() {  isAuthenticatedUser(userid) }

        }
         index()  {  "date" }
      }

  }
}*/
//SubGroup progress Report
path /subgroup-progress-reports/{groupid} {
 index()  {  "date" }


    /{subgroupid}{
      read()     {   isSubGroupMembersSubGroupIdAuthIDExist(groupid ,subgroupid)     &&
                      subGroupMembersMemberShipAnyType(groupid,subgroupid)  }
      /{userid} {

      /{reportid} is ProgressType {
          read() {   isAuthenticated() &&
                     isCurrentUserGroupOwner(groupid)    ||
                     isCurrentUserGroupAdmin(groupid) ||
                     subGroupMembersMemberShipAnyType(groupid,subgroupid) }
          write() {  isAuthenticatedUser(userid)  &&  isSubGroupMembersSubGroupIdAuthIDExist(groupid ,subgroupid)     &&
                      subGroupMembersMemberShipAnyType(groupid,subgroupid)
                  }

        }
         index()  {  "date" }
      }
      }


}

 type ProgressType {
  answers : String[],
  date    : CurrentTimeStamp,
  questionID : String,
  policyID : String,
  "modified-date": Number | Null

 }
/*Group Channel*/
path /group-channel/{groupid} {
    read()  { isAuthenticated() && userGroupMembershipAnyType(groupid) }

     /{channelid} is ChatChannelType  {
      read()  { isAuthenticated() && userGroupMembershipAnyType(groupid) }
      write() { isAuthenticated() && userGroupMembershipAnyType(groupid) }
    }

   index() { "title" }

}

/*Group Messages*/

path /group-messages/{groupid}/{channelid} {

  read()  { isAuthenticated() && userGroupMembershipAnyType(groupid) }

 /{messageid} is ChatChannelMessageType {

  create() { isAuthenticatedUser(this['from']) }
  update() { isAuthenticatedUser(prior(this['from'])) }
  delete() { isAuthenticatedUser(prior(this['from'])) }

  read()  { isAuthenticated() && userGroupMembershipAnyType(groupid) }

 }
}
/*Subgroup Channel*/

path /subgroup-channel/{groupid}{

  read() {  isAuthenticated() && userGroupMembershipAnyType(groupid) }
  /{subgroupid}/{channelid} is ChatChannelType {
     read()  { isAuthenticated() &&    subGroupMembersMemberShipAnyType(groupid,subgroupid) }
     write() { isAuthenticated() &&    subGroupMembersMemberShipAnyType(groupid,subgroupid) }
   }
 }
path /subgroup-messages/{groupid}/{subgroupid}/{channelid}{
  read()  { isAuthenticated() &&    subGroupMembersMemberShipAnyType(groupid,subgroupid) }

  /{messageid} is ChatChannelMessageType {
    create() { isAuthenticatedUser(this['from']) }
    update() { isAuthenticatedUser(prior(this['from'])) }
    delete() { isAuthenticatedUser(prior(this['from'])) }
    read()  { isAuthenticated() &&    subGroupMembersMemberShipAnyType(groupid,subgroupid) }
 }
}
type ChatChannelType {
   'created-by': String,
   timestamp   : CurrentTimeStamp,
   title       : String
}

 type ChatChannelMessageType {
  from : String,
  text : String,
  timestamp   : CurrentTimeStamp,
  attachmentId  : String | Null
 }
  /*Firebase Group*/
 path /firepad-groups/{groupid} {
   read() {
     isAuthenticated() && userGroupMembershipAnyType(groupid)
   }
   /{documentid}  {
     /history/{historyid} {
       create() { collaboratorGroupWriter(groupid, documentid) }
     }
   read() {
     isAuthenticated() && userGroupMembershipAnyType(groupid)
   }
   /users {
     create() { isAuthenticated() && userGroupMembershipAnyType(groupid) }
     update() { isAuthenticated() && userGroupMembershipAnyType(groupid) }
   }


 }
}
function collaboratorGroupWriter(groupid, documentid){
  return prior(root["firepad-groups-rules"][groupid][documentid]["allUsers"].val() == false ? root["firepad-groups-access"][groupid][documentid][auth.uid].val() != null : true)
}
function collaboratorSubGroupWriter(groupid, subgroupid ,documentid){

  return prior(root["firepad-subgroups-access"][groupid][subgroupid][documentid][auth.uid] != null ||
               root["firepad-subgroups-rules"][groupid][subgroupid][documentid]["allUsers"] == true)
}
/*firebase Subgroup*/

 path /firepad-subgroups/{groupid}/{subgroupid}{
   read() {
     isAuthenticated() && subGroupMembersMemberShipAnyType(groupid,subgroupid)
   }
   /{documentid}  {
     /history {
       create(){ collaboratorSubGroupWriter(groupid, subgroupid ,documentid) }

       delete(){ collaboratorSubGroupWriter(groupid, subgroupid ,documentid) }
     }
   read() {
     isAuthenticated() && subGroupMembersMemberShipAnyType(groupid,subgroupid)
   }
   create() {
     isAuthenticated() && subGroupMembersMemberShipAnyType(groupid,subgroupid)
    }
   update() {
     isAuthenticated() && subGroupMembersMemberShipAnyType(groupid,subgroupid)
    }
  }
}
/*firepad group documents*/
 path /firepad-groups-documents/{groupid}/{documentid} {
   read() {
     isAuthenticated() && userGroupMembershipAnyType(groupid)
   }
   create() {
     isAuthenticated() && userGroupMembershipAnyType(groupid)
   }
   update() {
     isAuthenticated() && userGroupMembershipAnyType(groupid)
   }
 }
 /*firepad Subgroup documents*/
 path /firepad-subgroups-documents/{groupid}/{subgroupid}{
   read() {
     isAuthenticated() && subGroupMembersMemberShipAnyType(groupid,subgroupid)
   }
 /{documentid}  {
   read() {
     isAuthenticated() && subGroupMembersMemberShipAnyType(groupid,subgroupid)
   }
   create() {
   isAuthenticated() && subGroupMembersMemberShipAnyType(groupid,subgroupid)
    }
   update() {
   isAuthenticated() && subGroupMembersMemberShipAnyType(groupid,subgroupid)
    }
   }
 }

/*User Activity Streams*/

/*path /user-activity-streams/{userid}{
  read() {
    isAuthenticated()
   }
   /{activityid} {
   read() {
     isAuthenticated()
    }
  write() {
    isAuthenticated()
   }
 }
  }*/
  function isGroupCollaboratorCreater(groupid, documentid) {
    return prior(root["firepad-groups-access"][groupid][documentid][auth.uid].val() == 1 )
  }
  function isSubGroupCollaboratorCreater(groupid,subgroupid, documentid) {
    return prior(root["firepad-subgroups-access"][groupid][subgroupid][documentid][auth.uid].val() == 1 )
  }
  /*firepad Group Access */
path /firepad-groups-access/{groupid}/{documentid} {
      read() {
        userGroupMembershipAnyType(groupid)
      }
      create() {
        userGroupMembershipAnyType(groupid)
      }
      update() {
      isGroupCollaboratorCreater(groupid, documentid) || isCurrentUserGroupOwner (groupid) || isCurrentUserGroupAdmin(groupid)
      }
   /{userid} is Number {
      read() {
      userGroupMembershipAnyType(groupid)
      }
      create() {
      userGroupMembershipAnyType(groupid)
      }
      delete() {
        isGroupCollaboratorCreater(groupid, documentid)
      }
    }
}
  /*firepad Group Rules */
path /firepad-groups-rules/{groupid}{

     /{documentid} is FirepadRulesType  {
      read() {
      userGroupMembershipAnyType(groupid)
      }
      create() { isAuthenticated() }
      update() { isCurrentUserGroupMembersOwner(groupid) || isCurrentUserGroupMembersAdmin(groupid) || isGroupCollaboratorCreater(groupid, documentid)}
}
  }
  /*firepad SubGroup Access */
path /firepad-subgroups-access/{groupid}/{subgroupid}/{documentid} {
  read() {
    subGroupMembersMemberShipAnyType(groupid,subgroupid)
  }
  create() {
        subGroupMembersMemberShipAnyType(groupid,subgroupid)
  }
  update() {  isCurrentSubUserGroupMembersOwner(groupid, subgroupid) ||
              isCurrentSubUserGroupMembersAdmin(groupid, subgroupid) ||
              isSubGroupCollaboratorCreater(groupid,subgroupid, documentid)}
    /{userid} is Number {
      read() {
      subGroupMembersMemberShipAnyType(groupid,subgroupid)
      }
      create() {
      subGroupMembersMemberShipAnyType(groupid,subgroupid)
      }
      delete() {  isCurrentSubUserGroupMembersOwner(groupid, subgroupid) ||
                  isCurrentSubUserGroupMembersAdmin(groupid, subgroupid) ||
                  isSubGroupCollaboratorCreater(groupid,subgroupid, documentid)}
}
}
/*firepad SubGroup Rules */

path /firepad-subgroups-rules/{groupid}/{subgroupid}/{documentid} is FirepadRulesType {
  read() {
    subGroupMembersMemberShipAnyType(groupid,subgroupid)
  }
  create() {
  subGroupMembersMemberShipAnyType(groupid,subgroupid)
  }
  update() { isCurrentSubUserGroupMembersOwner(groupid, subgroupid) ||
              isCurrentSubUserGroupMembersAdmin(groupid, subgroupid) ||
            isSubGroupCollaboratorCreater(groupid,subgroupid, documentid)}
}
type FirepadRulesType {
  allUsers: Boolean;
}

path /activities-seen-by-user/{userid} is ActivityType {
     read() { isAuthenticatedUser(userid)}
     write() { isAuthenticatedUser(userid)}
}
type ActivityType {
  timestamp: CurrentTimeStamp
}
// User Push Notification

path /user-push-notifications {
  read() { isAuthenticated()}
  write() { isAuthenticated()}

  /{userid}/{opratingSystem}/{browser}{

    /{pushNotificationsId} is PushNotification {
        /*write() {
          isAuthenticatedUser(userid)
        }
        read() { isAuthenticated()}*/
          /keys is Key {

          }

    }
}
  }

type PushNotification {
  endpoint: String
}

type Key {
  auth: String,
  p256dh: String
}


//----------------------------------
// Define isCurrentUser() function to test if the given user id
// matches the currently signed-in user.
//----------------------------------

/*function isAuthenticatedUser(userid) {
  return auth != null && auth.uid == userid;
}

function isAuthenticated() {
    return auth != null;
}

type CurrentTimeStamp extends Number {
  validate() {    this <= now; }
}*/

// Quiz Rules
//-----------------------------------------------------------------------------------
//       MemberType type extends globally and MemberType Number Validations Should Be
//-----------------------------------------------------------------------------------
function memberTypeShouldBe(that , num){
    return that  == num;
}

type QuestionBankMember extends Number {

    validate(){
        memberTypeShouldBe(this , 1) || memberTypeShouldBe(this , 2); // Owner = 1, Admin = 2
    }

}

function isQuestionBankOwner(questionBankMember) {
    return memberTypeShouldBe(questionBankMember , 1)
}

function isQuestionBankOwnerAppointingAdmin(questionBankUniqueID, value){
   return isAuthenticated() && isCurrentUserQuestionBankOwner(questionBankUniqueID) && memberTypeShouldBe(value["memberships-type"], 2);
}

function isCurrentUserQuestionBankOwner(questionBankUniqueID) {
    return isCurrentUserQuestionBankMember(questionBankUniqueID) &&
    prior(memberTypeShouldBe(root["question-bank-memberships"][questionBankUniqueID][auth.uid]["memberships-type"], 1));
}
function isCurrentUserQuestionBankAdmin(questionBankUniqueID) {
    return isCurrentUserQuestionBankMember(questionBankUniqueID) &&
    prior(memberTypeShouldBe(root["question-bank-memberships"][questionBankUniqueID][auth.uid]["memberships-type"], 2));
}

function isCurrentUserQuestionBankMember(questionBankUniqueID) {
    prior(root["question-bank-memberships"][questionBankUniqueID][auth.uid].val() != null)
}

//---------------------------------------------------
//         Function For SubGroup
//----------------------------------------------------

/*function  isSubGroupMembersSubGroupIdAuthIDMemberShipTypeExist($groupid,$subgroupid) {
  return prior(root['subgroup-members'][$groupid][$subgroupid][auth.uid]['membership-type'].val() != null)
}

function isSubGroupMembersSubGroupIdAuthIDExist($groupid ,$subgroupid) {
 return prior(root['subgroup-members'][$groupid][$subgroupid][auth.uid].val() != null )
}



function subGroupMembersMemberShipAnyType($groupid,$subgroupid) {
  return prior(root['subgroup-members'][$groupid][$subgroupid][auth.uid]['membership-type'].val() > 0)
}


function isCurrentSubUserGroupMembersOwner($groupid,$subgroupid) {
 return prior(root['subgroup-members'][$groupid][$subgroupid][auth.uid]['membership-type'].val() == 1)
}

function isCurrentSubUserGroupMembersAdmin($groupid,$subgroupid) {
 return prior(root['subgroup-members'][$groupid][$subgroupid][auth.uid]['membership-type'].val() == 2)
}*/



//----------------------------------
// Define function to test if the Question Bank Owner himself creating it for the first time
//----------------------------------

function isQuestionBankOwnerCreating(pathUserID, value) {
    return isQuestionBankOwner(value["memberships-type"]) &&  isAuthenticatedUser(pathUserID);
}

//----------------------------------
//      question-bank-memberships (Before creating a QuestionBank, create a owner membership first)
//----------------------------------
path /user-question-banks/{UserID} {
  read()   { isAuthenticatedUser(UserID) }
  /{questionBankUniqueID} is QuestionBankMembership {
      read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
      create() { isQuestionBankOwnerCreating(UserID, this) }
      update() { isQuestionBankOwnerCreating(UserID, this)  || isQuestionBankOwnerAppointingAdmin(questionBankUniqueID, this) }
  }
}
//----------------------------------
//      question-bank-memberships (Before creating a QuestionBank, create a owner membership first)
//----------------------------------

path /question-bank-memberships/{questionBankUniqueID}/{UserID} is QuestionBankMembership {
    read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
    create() { isQuestionBankOwnerCreating(UserID, this) }
    update() { isQuestionBankOwnerCreating(UserID, this)  || isQuestionBankOwnerAppointingAdmin(questionBankUniqueID, this) }
}

type QuestionBankMembership {
    "memberships-type" : QuestionBankMember,
     timestamp: CurrentTimeStamp                     //MemberType type extends globally
}

path /question-bank-names {
    read() {
      isAuthenticated()
    }

  /{questionBankUniqueID} is QuestionBankName {
    create() {
      isAuthenticated()
    }
  }


}
type QuestionBankName {
  title: String
}
//----------------------------------
//      question-bank (Before creating a QuestionBank, create a owner membership first)
//----------------------------------
path /question-bank/{questionBankUniqueID} is QuestionBank {
  read() { isAuthenticated() && isCurrentUserQuestionBankMember(questionBankUniqueID) }
  create() { isAuthenticated() }
  update() { isCurrentUserQuestionBankOwner(questionBankUniqueID) ||
             isCurrentUserQuestionBankAdmin(questionBankUniqueID)  }
              /chapters/{chapterId} is Chapter {
                  /topics/{topicId} is Topic {
                      /questions/{questionId} is Question {
                    //  /options is  Option[] { }
                      /questiones is QuestionSet[] {}
                     }
                  }
              }
}
type QuestionBank {
    timestamp  : CurrentTimeStamp,                   //Timestamp type extends globally
    title    : String,
    desc     : String,
    imgLogoUrl: String  | Null
}
type Chapter {
    timestamp  : CurrentTimeStamp,                   //Timestamp type extends globally
    title    : String,
    desc     : String
}
type Topic {
    timestamp  : CurrentTimeStamp,                   //Timestamp type extends globally
    title    : String,
    desc     : String
}
type Question {
   title: String,
   type: QuestionType, //QuestionTupe
   html: String,
   options: Map<String, Option>,
  // questiones: QuestionSet[] | Null,
   "discussion" : String
}
type QuestionSet {
   type: QuestionType, //QuestionTupe
   html: String,
   options: Map<String, Option>,
   "discussion" : String
}
type Option {
  "html": String,
  "correct": Boolean,
  "discussion" : String
}
//-----------------------------------------------------------
// Options Type 1 Radio Button , 2 CheckBox And 3 question Set
//---------------------------------------------------------

function optionsTypeShouldBe(that , num) {
    return that == num
}

type QuestionType extends Number{
   validate() {
   optionsTypeShouldBe(this , 1 ) || optionsTypeShouldBe(this , 2 ) || optionsTypeShouldBe(this , 3 );
   }
}


//----------------------------------
//     rules for QUIZES
//----------------------------------

path /answers/{userid}/{quizId}/{answerId}/{questionId}/{optionId} is Boolean { }

//--------------------------
//  Answer User
//--------------------------

path /answer-user/{userId}/{groupid}/{subgroupid}/{quizId}/{answerId}/{questionId}/{optionId} is Boolean {
read()  {  isAuthenticatedUser(userId) ||  isCurrentSubUserGroupMembersOwner($groupid,$subgroupid) ||
          isCurrentSubUserGroupMembersAdmin($groupid,$subgroupid)}  }
create() {  isAuthenticatedUser(userId)}
//--------------------------
//  Quizes Names
//--------------------------
path /quiz-name {
  read() { isAuthenticated() }
  /{quizId} is QuizName {
    create() { isAuthenticated() }
  }
}
type QuizName {
  title: String
}
//--------------------------
//  Quizes
//--------------------------

/*/questions/{questionId}  is QuizQuestionDesc{
read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
create() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
update() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
}*/

path /quizes/{quizId} is Quiz {
      read() { isQuizOwner(quizId) }
      create() { isQuizOwner(quizId) }
      update() { isQuizOwner(quizId) }
      /questionbanks/{questionBankUniqueID} is QuizQuestionBank {
        /chapters/{chapterId}  is QuizChapter {
          /topics/{topicId} is QuizTopic  {
            /questions/{questionId} is Question {
          //  /options is  Option[] { }
            /questiones is QuestionSet[] { }
           }
        }
      }
    }
}


type Quiz {
  title: String,
  desc: String,
  duration: Number,
  "num-questions": Number,
  imgLogoUrl: String | Null
}
type QuizQuestionBank {
  title: String,
  imgLogoUrl: String | Null
}

type QuizChapter {
  title: String
}
type QuizTopic {
  title: String,
}
//--------------------------
//  Quiz In Progress
//--------------------------
path /quiz-in-progress/{groupId}/{subgroupId}/{quizId} is Boolean {
  create() { isQuizOwner(quizId) }
  update() { isQuizOwner(quizId) }
}
//--------------------------
//  Quiz Schedules
//--------------------------
// All Quiz Schedules

path /all-quiz-schedules/{quizId} {
    read() { isQuizOwner(quizId) }
   /schedules/{scheduleId} is QuizSchedule[] {
        create() { isQuizOwner(quizId) }
  }
}


// Quiz Schedules for Subgroup
path /quiz-schedule/{groupid}/{subgroupid}/{quizId} is Quiz {
    create() { isQuizOwner(quizId) }
    update() { isQuizOwner(quizId) }
    /schedules/{scheduleId} is Schedules {
      read() { subGroupMembersMemberShipAnyType($groupid,$subgroupid) }
      create() { isCurrentSubUserGroupMembersOwner($groupid,$subgroupid) || isCurrentSubUserGroupMembersAdmin($groupid,$subgroupid) }
      update() { isCurrentSubUserGroupMembersOwner($groupid,$subgroupid) || isCurrentSubUserGroupMembersAdmin($groupid,$subgroupid) }
    }
}


type Schedules {
  "start-time": Number,
  "end-time": Number,
  "title": String
}
type QuizSchedule {
  "start-time": Number,
  "title": String,
  "end-time": Number,
  "group": String,
  "subgroup": String
}
//--------------------------
//  Quiz Proctoring Key
//--------------------------
path /quiz-proctoringkey/{quizid}/key is Boolean { }

//--------------------------
//  Answer User
//--------------------------

path /quiz-result/{userId}/{groupId}/{subgroupId}/{quizId}/{answerId}/{chapterId}/{topicId}/{questionId} is Boolean {
    read() { isAuthenticatedUser(userId) }
 }

//--------------------------
//  Quizes Answer
//--------------------------
path /quiz-answer/{quizId}/{questionBankUniqueID}/{chapterId}/{topicId}/{questionId}/{optionId} is Boolean {
   read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
   create() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
   update() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
  }
//--------------------------
//  Quizes Questions
/*//--------------------------

path /quizes/{quizId}/{questionBankUniqueID}/{chapterId}/{topicId}/{questionId} is QuizQuestionDesc {
  read()   { isCurrentUserQuestionBankMember(questionBankUniqueID) }
  create() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) }
  update() { isCurrentUserQuestionBankOwner(questionBankUniqueID) || isCurrentUserQuestionBankAdmin(questionBankUniqueID) } }*/


//--------------------------
//  User Quizes
//--------------------------
path /user-quiz/{userId} {
  read() { isAuthenticatedUser(userId) }
    /{quizId} is QuizMembership {
      read() { isQuizOwner(quizId) }
      create() { isQuestionBankOwnerCreating(userId, this) }
   }
}


type QuizMembership {
  "memberships-type": Number,
   timestamp: CurrentTimeStamp,
}
function isQuizOwner(quizId) {
  return prior(root["user-quiz"][auth.uid][quizId]["memberships-type"].val() == 1)
}
//===========================================================  23/1/16
